<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Callum Rollo - FOSS</title><link href="https://callumrollo.github.io/" rel="alternate"></link><link href="/feeds/foss.atom.xml" rel="self"></link><id>https://callumrollo.github.io/</id><updated>2024-03-06T07:20:00+00:00</updated><subtitle>Recovering oceanographer</subtitle><entry><title>ERDDAP tools and tutorials</title><link href="https://callumrollo.github.io/erddaptools.html" rel="alternate"></link><published>2024-03-06T07:20:00+00:00</published><updated>2024-03-06T07:20:00+00:00</updated><author><name>Callum Rollo</name></author><id>tag:callumrollo.github.io,2024-03-06:/erddaptools.html</id><summary type="html">&lt;p&gt;Various ERDDAP resources I have created, contributed to or found useful&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Core resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://erddap.github.io/"&gt;ERDDAP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/IrishMarineInstitute/awesome-erddap"&gt;awesome ERDDAP&lt;/a&gt; - a list of materials and ERDDAP servers maintained by the Irish Marine Institute &lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/g/erddap"&gt;ERDDAP google group&lt;/a&gt; useful mailing list for ERDDAP admin questions&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Tutorials&lt;/h1&gt;
&lt;p&gt;I made a 15 minute video demonstrating setting up an ERDDAP server and adding a new dataset using the axiom docker image. From the many methods I tried, this was the easiest way to get started with ERDDAP.&lt;/p&gt;
&lt;iframe src="https://callumrollo.com/files/docker-erddap.mp4" title="Video demo of setting up an ERDDAP server"&gt;&lt;/iframe&gt;

&lt;p&gt;You can download the video here &lt;a href="https://callumrollo.com/files/docker-erddap.mp4"&gt;callumrollo.com/files/docker-erddap.mp4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Transcript of all commands used in the video:  &lt;a href="https://callumrollo.com/files/erddap-docker-transcript.md"&gt;callumrollo.com/files/erddap-docker-transcript.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have given various talks on ERDDAP, mostly focused on using erddapy to access various oceanographic datasets. Here are a few of them:
- Gothenburg january 2023
- ERDDAP webinar series GOOS autumn/winter 2023&lt;/p&gt;
&lt;h1&gt;Tools&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ioos/erddapy"&gt;erddapy&lt;/a&gt; essential python client for downloading data from ERDDAP. I contributed to this during Google summer of code 2021 &lt;a href="griddap"&gt;adding griddap support to erddapy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ioos/gliderpy"&gt;gliderpy&lt;/a&gt; a wrapper around erddapy to make downloading glider data easier. I contributed to this during OceanHackWeek 2020&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/callumrollo/website-log-parse"&gt;ERDDAP log parser&lt;/a&gt; a tool for ERDDAP admins to get an idea of how their ERDDAP is being used. Work in progress!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/voto-ocean-knowledge/erddap_demo"&gt;VOTO ERDDAP demo&lt;/a&gt; A series of jupyter notebooks demonstrating how to use ERDDAP to download various datasets, using VOTO glider data as the core examples&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Rationale&lt;/h3&gt;
&lt;p&gt;I've put a lot of hour into various ERDDAP and ERDDAP adjacent tasks. It makes sense to have a list of all of them to point people to.&lt;/p&gt;
&lt;h3&gt;Acknowledgements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I was first introduced to ERDDAP by the excellent OceanHackWeek project&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocefpaf"&gt;Filiipe&lt;/a&gt; has been an invaluable mentor on all things ERDDAP and on my journey from oceanography PhD student to amateur research software engineer&lt;/li&gt;
&lt;li&gt;Patrick Gorringe of SMHI has tirelessly worked to introduce ERDDAP into the Swedish ocean data ecosystem. It is with his help, and that of Marco Alba and Antonio Novellino at ETT solutions, that I was able to set up the first ERDDAP server in Sweden to feed into EMODnet&lt;/li&gt;
&lt;li&gt;The ERDDAP tutorials and projects here were greatly improved by contributions and feedback from, among others Martin Mohrmann (VOTO), Chiara Moneforte (VOTO), Joanna Paczkowska (VOTO) and Samantha Ouertani (NOAA AOML)&lt;/li&gt;
&lt;/ul&gt;</content><category term="FOSS"></category><category term="software"></category><category term="foss"></category><category term="oceanography"></category><category term="ERDDAP"></category><category term="erddapy"></category></entry><entry><title>Useful online resources</title><link href="https://callumrollo.github.io/resources.html" rel="alternate"></link><published>2023-10-24T15:00:00+01:00</published><updated>2023-10-24T15:00:00+01:00</updated><author><name>Callum Rollo</name></author><id>tag:callumrollo.github.io,2023-10-24:/resources.html</id><summary type="html">&lt;p&gt;A collection of online resources I may or may not have gotten round to reading&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am using this page to bookmark and share some resources I have found useful. It also lets me close some of those browser tabs I've had open for months.&lt;/p&gt;
&lt;h1&gt;programming&lt;/h1&gt;
&lt;h3&gt;geospatial&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;an introduction to modern geospatial formats https://guide.cloudnativegeo.org&lt;/li&gt;
&lt;li&gt;regionmask https://github.com/regionmask/regionmask&lt;/li&gt;
&lt;li&gt;cool shaded relief maps https://github.com/joewdavies/geoblender&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ERDDAP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;coastwatch R tutorials https://github.com/CoastWatch-WestCoast/r_code/blob/master/README.md&lt;/li&gt;
&lt;li&gt;coastwatch tutorials on satellite data https://github.com/coastwatch-training/CoastWatch-Tutorials&lt;/li&gt;
&lt;li&gt;UMD extract goespatial data within a polygon https://umd.instructure.com/courses/1336575/pages/python-tutorial-3-extract-data-within-a-shapefile-using-erddap?module_item_id=12039958&lt;/li&gt;
&lt;/ul&gt;</content><category term="FOSS"></category><category term="software"></category><category term="foss"></category><category term="oceanography"></category><category term="web"></category><category term="geospatial"></category><category term="tutorial"></category><category term="reading"></category><category term="resource"></category></entry><entry><title>Analyse web logs</title><link href="https://callumrollo.github.io/weblogparse.html" rel="alternate"></link><published>2023-06-17T15:00:00+01:00</published><updated>2023-10-12T11:00:00+01:00</updated><author><name>Callum Rollo</name></author><id>tag:callumrollo.github.io,2023-06-17:/weblogparse.html</id><summary type="html">&lt;p&gt;Parsing web log files to gain insight into visitors to our ERDDAP server&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; The scripts described in this article are available in a &lt;a href="https://github.com/callumrollo/website-log-parse"&gt;github repo&lt;/a&gt; as jupyter notebooks.&lt;/p&gt;
&lt;p&gt;Web analytics are big business. Products like Google Analytics enable incredibly granular and detailed examination of every user to your website. However, if you do not wish to collect and retain data at this level using tools like cookies or tracking beacons, either out of respect to your users privacy or because &lt;a href="https://www.theregister.com/2022/02/10/google_analytics_gdpr_breach/,"&gt;it's the law&lt;/a&gt;, you need to do your own user analysis.&lt;/p&gt;
&lt;p&gt;This blog explains the process I went through to analyse use traffic to my organisation's &lt;a href="https://erddap.observations.voiceoftheocean.org/erddap/index.html"&gt;ERDDAP data server&lt;/a&gt; to get an idea of what data is being requested and where our users are. I approached this with the following priorities:
1. No third party trackers on the site
2. Aggregate data at the regional/national level to preserve anonymity
3. Search for trends in the data requests that users were making to guide our data sharing strategy&lt;/p&gt;
&lt;h3&gt;Step 0. Get and retain the web logs&lt;/h3&gt;
&lt;p&gt;We first ran our ERDDAP server on apache, then migrated to nginx. In both cases, it's essential to set the retention of your logs to a sufficiently long period such that the log files are not deleted during regular log rotation. I did this in nginx by setting &lt;code&gt;rotate 3650&lt;/code&gt; in the file &lt;strong&gt;/etc/logrotate.d/nginx&lt;/strong&gt;. This sets the number of days to keep access logs from, in this case 10 years.&lt;/p&gt;
&lt;p&gt;Alternatively, you could regularly copy the logs from your server to the computer you use for analysis with e..g rsync.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data snapshot&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;137.184.165.96&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;07&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Jan&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2023&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;04&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;37&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;0000&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GET /erddap/tabledap/nrt_SEA056_M57.jsonlKVP?latitude%2Clongitude%2Ctime%2Cdive_num HTTP/1.1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;200&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;932348&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;axios/0.24.0&amp;quot;&lt;/span&gt;
&lt;span class="mf"&gt;137.184.165.96&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;07&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Jan&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2023&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;04&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;37&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;0000&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GET /erddap/tabledap/nrt_SEA045_M73.jsonlKVP?latitude%2Clongitude%2Ctime%2Cdive_num HTTP/1.1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;200&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;853145&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;axios/0.24.0&amp;quot;&lt;/span&gt;
&lt;span class="mf"&gt;185.191.171.4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;07&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Jan&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2023&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;05&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;46&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;0000&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GET /erddap/tabledap/delayed_SEA066_M41.subset?.bgColor=0xffccccff&amp;amp;.click&amp;amp;.color=0x000000&amp;amp;.colorBar=%7C%7C%7C%7C%7C&amp;amp;.draw=markers&amp;amp;.marker=5%7C5&amp;amp;.viewDistinctMap=true&amp;amp;longitude%2Clatitude%2Ctime HTTP/1.1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;200&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;20272&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Mozilla/5.0 (compatible; SemrushBot/7~bl; +http://www.semrush.com/bot.html)&amp;quot;&lt;/span&gt;
&lt;span class="mf"&gt;54.36.148.78&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;07&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Jan&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2023&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;05&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;47&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;0000&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GET /erddap/tabledap/delayed_SEA056_M54.graph?longitude,latitude,time&amp;amp;.draw=markers&amp;amp;.colorBar=%7CD%7C%7C%7C%7C HTTP/1.1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;200&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;30929&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Mozilla/5.0 (compatible; AhrefsBot/7.0; +http://ahrefs.com/robot/)&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 1. Parse and combine logs&lt;/h3&gt;
&lt;p&gt;Weserver logs typically have a line by line structure with each line describing a user request. This will include the time of the request, the origin ip and the url requested. The log may also contain information like the user agent (e.g. "Firefox on a Windows PC"). We extract this data into a pandas DataFrame to make it easier to process.&lt;/p&gt;
&lt;p&gt;The logs for apache and nginx are different, so some work is needed to combine them. The trickiest step, as is often the case in Python, was getting the timestamps into the same format.&lt;/p&gt;
&lt;p&gt;With over 1 million lines of logfile, I started hitting a performance bottleneck with pandas, so I put my data in a &lt;a href="https://www.pola.rs/"&gt;polars&lt;/a&gt; dataframe, which gave a substantial speedup.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data snapshop&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;┌────────────────┬─────────────────────┬───────────────────────────────────┐
│ ip             ┆ datetime            ┆ url                               │
│ ---            ┆ ---                 ┆ ---                               │
│ str            ┆ datetime[μs]        ┆ str                               │
╞════════════════╪═════════════════════╪═══════════════════════════════════╡
│ 54.36.148.29   ┆ 2023-08-13 00:03:31 ┆ /erddap/files/adcp_SEA045_M37/?C… │
│ 208.115.199.29 ┆ 2023-08-13 00:04:31 ┆ /erddap/index.html                │
│ 54.36.149.29   ┆ 2023-08-13 00:05:38 ┆ /erddap/metadata/iso19115/xml/nr… │
│ 54.36.148.227  ┆ 2023-08-13 00:07:37 ┆ /erddap/tabledap/delayed_SEA061_… │
└────────────────┴─────────────────────┴───────────────────────────────────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 2. Retrieve ip information&lt;/h3&gt;
&lt;p&gt;Several services can be used to fetch information on an ip address, including the approximate location, ISP, country and operating organisation. I used &lt;a href="http://ip-api.com/"&gt;http://ip-api.com/&lt;/a&gt;. You can make up to 60 freee requests per minute using Python requests, and getting back nice structured json. I first sort the ip addresses by number of requests, so that we prioritise getting information from the visitors that have made the most requests to our site. We store the info and never request the same ip twice, so that over time we build the amount of information we have on the site's users.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data snapsho&lt;/strong&gt;t&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;┌────────────┬─────────┬───────────┬───────────┬───┬───────────┬───────────┬───────────┬───────────┐
│ query      ┆ status  ┆ country   ┆ countryCo ┆ … ┆ timezone  ┆ isp       ┆ org       ┆ as        │
│ ---        ┆ ---     ┆ ---       ┆ de        ┆   ┆ ---       ┆ ---       ┆ ---       ┆ ---       │
│ str        ┆ str     ┆ str       ┆ ---       ┆   ┆ str       ┆ str       ┆ str       ┆ str       │
│            ┆         ┆           ┆ str       ┆   ┆           ┆           ┆           ┆           │
╞════════════╪═════════╪═══════════╪═══════════╪═══╪═══════════╪═══════════╪═══════════╪═══════════╡
│ 137.184.16 ┆ success ┆ Canada    ┆ CA        ┆ … ┆ America/T ┆ DigitalOc ┆ DigitalOc ┆ AS14061   │
│ 5.96       ┆         ┆           ┆           ┆   ┆ oronto    ┆ ean, LLC  ┆ ean, LLC  ┆ DigitalOc │
│            ┆         ┆           ┆           ┆   ┆           ┆           ┆           ┆ ean, LLC  │
│ 208.115.19 ┆ success ┆ United    ┆ US        ┆ … ┆ America/C ┆ Limestone ┆ null      ┆ AS46475   │
│ 9.29       ┆         ┆ States    ┆           ┆   ┆ hicago    ┆ Networks  ┆           ┆ Limestone │
│            ┆         ┆           ┆           ┆   ┆           ┆           ┆           ┆ Networks, │
│            ┆         ┆           ┆           ┆   ┆           ┆           ┆           ┆ Inc.      │
└────────────┴─────────┴───────────┴───────────┴───┴───────────┴───────────┴───────────┴───────────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 3. Combine requests and ip information&lt;/h3&gt;
&lt;p&gt;This is achieved with a classic dataset merge&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;df_pd = pd.merge(df_pd, df_ip, left_on=&amp;quot;ip&amp;quot;, right_on=&amp;quot;query&amp;quot;, how=&amp;quot;left&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, all the requests from ip addresses that we have information for have that ip metadata added.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data snapshot&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;┌────────────┬────────────┬────────────┬────────────┬───┬──────┬────────────┬─────────┬────────────┐
│ ip         ┆ datetime   ┆ url        ┆ query      ┆ … ┆ org  ┆ as         ┆ ip_root ┆ ip_group   │
│ ---        ┆ ---        ┆ ---        ┆ ---        ┆   ┆ ---  ┆ ---        ┆ ---     ┆ ---        │
│ str        ┆ datetime[μ ┆ str        ┆ str        ┆   ┆ str  ┆ str        ┆ str     ┆ str        │
│            ┆ s]         ┆            ┆            ┆   ┆      ┆            ┆         ┆            │
╞════════════╪════════════╪════════════╪════════════╪═══╪══════╪════════════╪═════════╪════════════╡
│ 208.115.19 ┆ 2022-09-16 ┆ /erddap/in ┆ 208.115.19 ┆ … ┆ null ┆ AS46475    ┆ 208.115 ┆ 208.115.19 │
│ 9.29       ┆ 08:19:59   ┆ dex.html   ┆ 9.29       ┆   ┆      ┆ Limestone  ┆         ┆ 9          │
│            ┆            ┆            ┆            ┆   ┆      ┆ Networks,  ┆         ┆            │
│            ┆            ┆            ┆            ┆   ┆      ┆ Inc.       ┆         ┆            │
│ 208.115.19 ┆ 2022-09-16 ┆ /erddap/in ┆ 208.115.19 ┆ … ┆ null ┆ AS46475    ┆ 208.115 ┆ 208.115.19 │
│ 9.29       ┆ 08:24:59   ┆ dex.html   ┆ 9.29       ┆   ┆      ┆ Limestone  ┆         ┆ 9          │
│            ┆            ┆            ┆            ┆   ┆      ┆ Networks,  ┆         ┆            │
│            ┆            ┆            ┆            ┆   ┆      ┆ Inc.       ┆         ┆            │
└────────────┴────────────┴────────────┴────────────┴───┴──────┴────────────┴─────────┴────────────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 4. Filter requests&lt;/h3&gt;
&lt;p&gt;There are many requests that we do not want to include in our analysis. These include requests from crawlers, which are indexing webpages for search engines like Google, services monitoring uptime, which periodically ping a site to check it hasn't crashed, and various bad actors probing a site for weaknesses, like a mistakenly uploaded credentials file. We remove this from our dataframe so that we only analyse requests from genuine visitors.&lt;/p&gt;
&lt;p&gt;This is far from a foolproof method, but we don't need to be perfect. Here are some of the filters I use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Filter out requests from known crawlers, e.g. IPs from  organisations with names including &lt;code&gt;["Google", "Crawlers", "SEMrush"]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Filter out any requests for files that aren't present on the server. Currently &lt;code&gt;".env", "env.", ".php", ".git", "robots.txt", "phpinfo", "/config", "aws", ".xml"]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Filter out reqeusts that do not contain "erddap". All genuine requests to the erddap server will contain this string&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I log the percentage of requests removed by this filtering step. It's usually about one third of all requests.&lt;/p&gt;
&lt;h3&gt;Step 5. Analysis&lt;/h3&gt;
&lt;p&gt;There is a lot of information in these requests! I currently look for a few things:
- Where are requests coming from?
- What pages are users visiting most?
- What filetypes are users requests? &lt;/p&gt;
&lt;p&gt;This last question is of interest for ERDDAP, as users may request difference download types like csv, netCDF, kml and others.&lt;/p&gt;
&lt;p&gt;We make figures, inlcuding maps of where users come from and graphs of how the total number of request and daily unique users has changed over time.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Reqeusts to ERDDAP by country" src="../images/erddap_visits_by_country.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Map of requests from Europe" src="../images/observations_map_europe.png"&gt;&lt;/p&gt;</content><category term="FOSS"></category><category term="software"></category><category term="foss"></category><category term="oceanography"></category><category term="web"></category><category term="logs"></category><category term="python"></category><category term="polars"></category></entry><entry><title>Leaflet maps with Python-flask</title><link href="https://callumrollo.github.io/flask_leaflet.html" rel="alternate"></link><published>2022-04-25T17:00:00+01:00</published><updated>2022-04-25T17:00:00+01:00</updated><author><name>Callum Rollo</name></author><id>tag:callumrollo.github.io,2022-04-25:/flask_leaflet.html</id><summary type="html">&lt;p&gt;Creating interactive maps using Python-flask and leaflet&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have one website gimmick: interactive webmaps using leaflet and backed by Python-flask.&lt;/p&gt;
&lt;p&gt;This may sound like a word salad, but it's a useful and simple (trust me) software stack for making visualisation and exploration of spatio-temporal data easy. &lt;/p&gt;
&lt;p&gt;I call it a gimmick because I've used the same core method to create:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The UEA glider group &lt;a href="https://ueaglider.uea.ac.uk/"&gt;piloting website&lt;/a&gt; (&lt;a href="https://github.com/ueaglider/ueaglider-web"&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The NBP 2202 cruise &lt;a href="https://nbp2202map.com/"&gt;data website&lt;/a&gt; (the main subject of this article) &lt;a href="https://github.com/callumrollo/itgc-2022-map"&gt;source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The VOTO public facing live data website (work in progress) (&lt;a href=""&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Why you might want a site like this&lt;/h3&gt;
&lt;p&gt;If you want to display geospatial data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;at varying scale&lt;/li&gt;
&lt;li&gt;with selectable layers&lt;/li&gt;
&lt;li&gt;with different overlays/backgrounds&lt;/li&gt;
&lt;li&gt;in an interactive manner&lt;/li&gt;
&lt;li&gt;to non-technical users&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This works best with data that can be plotted as lines and points, but polygons are possible too.&lt;/p&gt;
&lt;h3&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Some data&lt;/li&gt;
&lt;li&gt;A reasonable grasp of Python&lt;/li&gt;
&lt;li&gt;Ability to setup a basic linux cloud server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If any of these are missing, check out the links at the end of this article for some tutorials and datasets.&lt;/p&gt;
&lt;h3&gt;Tech stack&lt;/h3&gt;
&lt;p&gt;The core library here is &lt;a href="https://flask.palletsprojects.com"&gt;flask&lt;/a&gt;, a Python micro-framework. It is a very minimal framework that allows us to make a slim website with no real database to complicate things. We will also use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;leaflet maps&lt;/li&gt;
&lt;li&gt;jinja2 templates&lt;/li&gt;
&lt;li&gt;json&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;First, imitate&lt;/h1&gt;
&lt;p&gt;I personally find it a lot easier to start by downloading, building and deploying a functional app than to start from scratch. This gives you a realistic view of the amount of work required to share your app and helps separate errors of code from errors of implementation.&lt;/p&gt;
&lt;p&gt;With that said, let's begin!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download the &lt;a href="https://github.com/callumrollo/itgc-2022-map"&gt;nbp2202 website source code&lt;/a&gt; from GitHub
&lt;a href="https://github.com/callumrollo/itgc-2022-map/archive/refs/heads/main.zip"&gt;click here&lt;/a&gt; to get the zip file&lt;/li&gt;
&lt;li&gt;Create a Python environment using pip and the requirements.txt file or conda and the environment.yml file. Each works as well as the other&lt;/li&gt;
&lt;li&gt;navigate to the directory where the environment files are and run the command &lt;code&gt;python itgc/app.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open a browser window and go to &lt;a href="http://127.0.0.1:5000/"&gt;127.0.0.1:5000&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;That's it! You're running the app on your very own PC. You should see a website that looks and functions just like the one at &lt;a href="https://nbp2202map.com"&gt;nbp2202map.com&lt;/a&gt; but it is running solely on your PC&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Next, remix&lt;/h1&gt;
&lt;p&gt;I recommend using &lt;a href="https://git-scm.com/docs/gittutorial"&gt;git&lt;/a&gt; to keep track of changes to the codebase of this project. If you're particularly keen, maybe you already forked the repo in step 1 to start editing your own version.&lt;/p&gt;
&lt;p&gt;The first place to make changes is in &lt;code&gt;index.html&lt;/code&gt; this is the code for the webpage that the user interacts with
Here are some suggestions of things you might change:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The default starting location and zoom with &lt;code&gt;map.setView&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The base layer and optional overlays of the map in  &lt;code&gt;maplayers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The text on the page in the &lt;code&gt;container instructions&lt;/code&gt;  section.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to change the data itself, like adding more points and lines, you'll need to make a few of changes.&lt;/p&gt;
&lt;p&gt;Each dataset is made into its own layer, which is then added to the map. See, for example, how we add the kasten and megacore sites. This is done in three steps on the map:&lt;/p&gt;
&lt;p&gt;First we define an icon, with a size and an anchor point (which part of the image is placed at the location of the core site).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;let thorIcon = L.icon({
    iconUrl: &amp;#39;/static/img/icons/thor.png&amp;#39;,
    iconSize:     [30, 35], // size of the icon
    iconAnchor:   [20, 15], // point of the icon which will correspond to marker&amp;#39;s location
    popupAnchor:  [0, -15] // point from which the popup should open relative to the iconAnchor
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next,  we create a layer for the map. For this we read in a geoJSON dictionary and make a layer from points, calling an extra function &lt;code&gt;popupText&lt;/code&gt; to make the little popup boxes that contain metadata on the core site&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;let thorLayer =  L.geoJSON(thorDict, {
        pointToLayer: function (feature, latlng) {
            return L.marker(latlng, {icon: thorIcon});
        },
        onEachFeature: popupText
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, we add the layer to the map as an optional layer that the user can select&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;quot;mega/kasten core ⛏&amp;quot;: thorLayer,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These are the steps to display the data, but first we need to coerce our dataset itself into geoJSON. geoJSON is a well defined format. I have written a few scripts to write geoJSON from a pandas dataframe of lon, lat, datetime and metadata of some kind. You can download it &lt;a href="../images/df_to_json.py"&gt;here&lt;/a&gt;. You should be able to adapt it to your needs.&lt;/p&gt;
&lt;p&gt;Once you have a way of converting your data to geoJSON, you import it into the app in the file &lt;code&gt;viewmodels/mission/mission_viewmodel.py&lt;/code&gt;. The process of importing json files happens at the top of the &lt;code&gt;add_events&lt;/code&gt; function. Just add your dataset to the list and copy the json file to the &lt;code&gt;static/json/nbp_data&lt;/code&gt; directory. The advantage of adding the data through Python rather than just reading geoJSON straight into the leaflet map, is that it enables the temporal subsetting feature that allows a user to display only data within a certain time window.&lt;/p&gt;
&lt;p&gt;Exploring this file, you will see similar functions for adding isobaths and may optional layers of satellite data. &lt;/p&gt;
&lt;h1&gt;On to the web&lt;/h1&gt;
&lt;p&gt;You've done it! A website of your own. Assuming you wish to share it with others (why else would you make a website?) you now need to host this on a server somewhere. This can seem daunting at first, but it's just a few easy steps. I have included the exact commands necessary in code blocks&lt;/p&gt;
&lt;h4&gt;Get a cloud server running Ubuntu&lt;/h4&gt;
&lt;p&gt;Check out links at the bottom of this page for some suggestions. I have used a Shared CPU Nanode (1 GB) from &lt;a href="linode.com"&gt;linode&lt;/a&gt; running Ubuntu 20.04 LTS.&lt;/p&gt;
&lt;h4&gt;Login with SSH and update your server&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;apt update &amp;amp;&amp;amp; apt upgrade -y
reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Recommended&lt;/em&gt; follow &lt;a href="https://www.linode.com/docs/guides/set-up-and-secure/"&gt;this guide&lt;/a&gt; to securing your server&lt;/p&gt;
&lt;h4&gt;Install key packages and libraries for the app&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;essential&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;unzip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;
&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;
&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;
&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;recommends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;libpcre3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;libz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Open ports and enable firewall&lt;/h4&gt;
&lt;p&gt;We'll want 22 (ssh), 80 (http) and 443 (https). &lt;strong&gt;Make sure you opened 22 before enabling the firewall&lt;/strong&gt; or you could lock yourself out of the machine&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ufw allow 22
ufw allow 80
ufw allow 443
ufw enable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Copy the app to the server&lt;/h4&gt;
&lt;p&gt;Make a new directory &lt;code&gt;/apps&lt;/code&gt; and copy your app to it. Use your own github repo here if you've already made some changes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir /apps
cd /apps
git clone https://github.com/callumrollo/itgc-2022-map.git
chmod 777 /apps/itgc-2022-map/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Create and activate the app environment&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;itgc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2022&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;
&lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;
&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;upgrade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;setuptools&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;upgrade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;httpie&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;glances&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;upgrade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;uwsgi&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example I'm using pip. All of these packages are available on conda-forge too though if you prefer conda.&lt;/p&gt;
&lt;h4&gt;Set up the app&lt;/h4&gt;
&lt;p&gt;We create a service under &lt;code&gt;uwsgi&lt;/code&gt;. This will manage instances of the app for every user that view the page. Enable the service so that it starts automatically when the server is rebooted&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cp /apps/itgc-2022-map/server/nbpmap.service /etc/systemd/system/nbpmap.service
systemctl enable nbpmap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check that the service is running successfully with &lt;code&gt;systemctl status nbpmap&lt;/code&gt;. If there are errors, check that the paths in &lt;code&gt;nbpmap.service&lt;/code&gt; match the paths on your server&lt;/p&gt;
&lt;h4&gt;Setup &lt;code&gt;nginx&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;nginx is the web server that will to handle requests to the app from the internet&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;rm /etc/nginx/sites-enabled/default
cp /apps/itgc-2022-map/server/nbpmap.nginx  /etc/nginx/sites-enabled/nbpmap.nginx
update-rc.d nginx enable
service nginx restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should now see your site if you navigate to the server's IP address in a browsers&lt;/p&gt;
&lt;h4&gt;Optional: get a domain&lt;/h4&gt;
&lt;p&gt;You can purchase a domain like &lt;em&gt;mycoolapp.com&lt;/em&gt;, set up an A record pointing to the IP address of this server and get free SSL certificates from Lets Encrypt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo snap install core; sudo snap refresh core
sudo snap install --classic certbot
sudo ln -s /snap/bin/certbot /usr/bin/certbot
sudo certbot --nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now your users can securely visit the app with https rather than just plain http. This is essential if you decide to add users and authentication later and is generally good practice. Also you get a cool domain name, not just a dotted quad of numbers to visit.&lt;/p&gt;
&lt;h1&gt;Going further&lt;/h1&gt;
&lt;p&gt;If this has given you an appetite for web development, you can build on this simple web app.&lt;/p&gt;
&lt;p&gt;This app only has one webpage, but you can easily add more. You could also try adding a database. This makes your application more performant and really increases the scope of actions you can support. I recommend TalkPython fm's Flask course for a thorough explanation of these, link in the section below. You can also check out the source code for the other two projects linked above for examples with SQL and MongoDB.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Resources and links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I learned flask from &lt;a href="https://training.talkpython.fm/courses/explore_flask/building-data-driven-web-applications-in- python-with-flask-sqlalchemy-and-bootstrap"&gt;TalkPython Training's Flask course&lt;/a&gt; it goes into a lot more detail and enables you to make a really powerful, flexible website. It also covers deployment to the web in good detail&lt;/li&gt;
&lt;li&gt;You can learn enough html and CSS to get by just by googling things when they break. &lt;a href="www.w3schools.com"&gt;w3schools&lt;/a&gt; have some good resources though, and the &lt;a href="https://getbootstrap.com/docs/3.4/css/"&gt;bootstap docs&lt;/a&gt; are pretty good.&lt;/li&gt;
&lt;li&gt;&lt;a href="leafletjs.com"&gt;leaflet maps&lt;/a&gt; have some great tutorials. You could get most of the functionality of this app just using leaflet and json.&lt;/li&gt;
&lt;li&gt;You can set yourself up with a cloud server for less than $/£/€ 10 a month from a cloud host like &lt;a href="https://www.linode.com/docs/guides/set-up-and-secure/"&gt;Linode&lt;/a&gt; or &lt;a href="https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04"&gt;DigitalOcean&lt;/a&gt;. Personally I'd avoid AWS at first as the learning curve is steeper, and it's a lot easier to end up accidentally running up a large bill. You can also search for credit codes/sign up links. You can typically get several months free this way.&lt;/li&gt;
&lt;/ul&gt;</content><category term="FOSS"></category><category term="python"></category><category term="maps"></category><category term="flask"></category><category term="automation"></category><category term="front-end"></category></entry><entry><title>Automation for oceanographers</title><link href="https://callumrollo.github.io/automation.html" rel="alternate"></link><published>2022-01-07T15:20:00+00:00</published><updated>2022-04-18T14:15:00+01:00</updated><author><name>Callum Rollo</name></author><id>tag:callumrollo.github.io,2022-01-07:/automation.html</id><summary type="html">&lt;p&gt;Writing hacky scripts for oceanography&lt;/p&gt;</summary><content type="html">&lt;p&gt;As a physical oceanographer, I occasionally spend chunks of time at sea. Typically this will be aboard a scientific research vessel with very limited shoreside connectivity. In order to keep oceanographic data flowing, I have developed several hacky scripts to perform routine analysis and transfer data in an efficient manner.&lt;/p&gt;
&lt;h3&gt;Read emails in Python&lt;/h3&gt;
&lt;p&gt;This script is used to periodically check a mailbox for emails and take an action if they match certain criteria. I developed this to read automated emails of glider locations and add them to a database&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;imaplib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;email&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_email_from_gmail&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# check what time email was last checked&lt;/span&gt;
    &lt;span class="n"&gt;timefile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lastcheck.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;timefile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lastcheck.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;variable_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;variable_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;last_check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromisoformat&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;last_check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1970&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Write the time of this run&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lastcheck.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="c1"&gt;# Check gmail account for emails&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imaplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IMAP4_SSL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;imap.gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;youremail@gmail.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;inbox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ALL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mail_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;id_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mail_ids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;first_email_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;latest_email_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="c1"&gt;# Cut to last 10 emails&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;first_email_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="c1"&gt;# Check which emails have arrived since the last run of this script&lt;/span&gt;
    &lt;span class="n"&gt;unread_emails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_email_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;latest_email_id&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;(RFC822)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;response_part&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response_part&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message_from_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response_part&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="n"&gt;date_tuple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parsedate_tz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;date_tuple&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;local_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromtimestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mktime_tz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date_tuple&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;local_date&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;last_check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;unread_emails&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Exit if no new emails&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;unread_emails&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mqtt-log.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; no new mail&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Check new emails&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;unread_emails&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;(RFC822)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;response_part&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response_part&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message_from_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response_part&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="n"&gt;email_subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;email_from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;from&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="c1"&gt;#print (&amp;#39;From : &amp;#39; + email_from + &amp;#39;\n&amp;#39;)&lt;/span&gt;
                &lt;span class="c1"&gt;#print (&amp;#39;Subject : &amp;#39; + email_subject + &amp;#39;\n&amp;#39;)&lt;/span&gt;
                &lt;span class="c1"&gt;# If email is from UEA domain and subject is GPS, pass to glider_loc script&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;email_from&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;uea.ac.uk&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;email_subject&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GPS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="c1"&gt;# The function glider_loc takes the glider location and relays it over MQTT&lt;/span&gt;
                    &lt;span class="n"&gt;glider_loc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email_from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note: to avoid getting locked out by Gmail, I recommend enabling 2FA and creating an &lt;a href="https://support.google.com/accounts/answer/185833?hl=en"&gt;app password&lt;/a&gt; for this script to use.&lt;/p&gt;
&lt;h3&gt;Automated emails for data transfer&lt;/h3&gt;
&lt;p&gt;The simplest method I have found for sending automated emails is to install &lt;a href="https://wiki.debian.org/nullmailer#Installation_Examples_-_GMail"&gt;nullmailer&lt;/a&gt; on a Linux box then run a short shell script.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
mv&lt;span class="w"&gt; &lt;/span&gt;/home/pilot/data-to-nbp/most-recent&lt;span class="w"&gt; &lt;/span&gt;/home/pilot/data-to-nbp/dives-&lt;span class="sb"&gt;`&lt;/span&gt;date&lt;span class="w"&gt; &lt;/span&gt;+&lt;span class="s2"&gt;&amp;quot;%Y-%m-%dT%H:%M&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
mv&lt;span class="w"&gt; &lt;/span&gt;/home/pilot/data-to-nbp/dives-to-nbp.zip&lt;span class="w"&gt; &lt;/span&gt;/home/pilot/data-to-nbp/dives-to-nbp.zip-&lt;span class="sb"&gt;`&lt;/span&gt;date&lt;span class="w"&gt; &lt;/span&gt;+&lt;span class="s2"&gt;&amp;quot;%Y-%m-%dT%H:%M&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
mkdir&lt;span class="w"&gt; &lt;/span&gt;/home/pilot/data-to-nbp/most-recent
find&lt;span class="w"&gt; &lt;/span&gt;/home/sg**/p*.mat&lt;span class="w"&gt; &lt;/span&gt;-mtime&lt;span class="w"&gt; &lt;/span&gt;-0.25&lt;span class="w"&gt; &lt;/span&gt;-exec&lt;span class="w"&gt; &lt;/span&gt;cp&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/pilot/data-to-nbp/most-recent&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="se"&gt;\;&lt;/span&gt;
zip&lt;span class="w"&gt; &lt;/span&gt;-rj&lt;span class="w"&gt; &lt;/span&gt;/home/pilot/data-to-nbp/dives-to-nbp.zip&lt;span class="w"&gt; &lt;/span&gt;/home/pilot/data-to-nbp/most-recent
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data last 6 hours&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mail&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data4u&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;email@provider&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt;  &lt;/span&gt;/home/pilot/data-to-nbp/dives-to-nbp.zip
&lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\n%s&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+%Y-%m-%dT%H:%M:%S&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/home/pilot/data-to-nbp/transfer.log
&lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, transferred data&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/home/pilot/data-to-nbp/transfer.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This script performs several useful tasks. Here's a line by line breakdown
- Archives the folder &lt;code&gt;/home/pilot/data-to-nbp/most-recent&lt;/code&gt; with a timestamp
- archives the previously sent zip file
- creates a directory
- finds files matching a certain pattern created in the last 6 hours and copies them to that directory
- zips the files
- emails the zip file to a recipient
- logs that the transfer was successful&lt;/p&gt;
&lt;h3&gt;Read locations from Argos tags&lt;/h3&gt;
&lt;p&gt;This Python script accesses the &lt;a href="https://argos-system.cls.fr/argos-cwi2/login.html"&gt;Argos web portal&lt;/a&gt; through a dedicated &lt;a href="http://ws-argos.cls.fr/argosDws/services/DixService?wsdl"&gt;web API&lt;/a&gt;. This enable automated access to Argos tag locations&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;zeep&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;xmltodict&lt;/span&gt;

&lt;span class="n"&gt;wsdl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://ws-argos.cls.fr/argosDws/services/DixService?wsdl&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zeep&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wsdl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wsdl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;resp_xml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getXml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;argos username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;argo password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nbPassByPtt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="n"&gt;nbDaysFromNow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="n"&gt;displayLocation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;displayRawData&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="n"&gt;mostRecentPassages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;platformId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag_number&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;resp_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xmltodict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp_xml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resp_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# Only some records have valid locations&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;program&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="n"&gt;baz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;program&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;platform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;b0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;satellitePass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;b0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;location&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;argo_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;location&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;location_ate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argo_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;locationDate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;T%H:%M:%S.&lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s1"&gt;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;location_tag_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;location_longitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argo_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;longitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;location_latitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argo_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;latitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;location_quality&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argo_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;locationClass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;location_altitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argo_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;altitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;GDAL for creating webtiles&lt;/h3&gt;
&lt;p&gt;Short bash script that will take any input geotiff and create webtiles for use with leaflet maps. This is how I generated the ice maps for the &lt;a href="https://github.com/callumrollo/itgc-2022-map"&gt;nbp2202map&lt;/a&gt; and &lt;a href="https://nbp2202map.com/"&gt;website&lt;/a&gt;. Credit to &lt;a href="https://www.kth.se/profile/liling/"&gt;Li Ling&lt;/a&gt; for figuring out how to warp the geotiffs to a usable projection.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;:/home/callum/anaconda3/envs/geospatial/bin
&lt;span class="nv"&gt;infile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;input_filename.tif
gdalwarp&lt;span class="w"&gt; &lt;/span&gt;-t_srs&lt;span class="w"&gt; &lt;/span&gt;EPSG:4326&lt;span class="w"&gt; &lt;/span&gt;-te&lt;span class="w"&gt; &lt;/span&gt;-140&lt;span class="w"&gt; &lt;/span&gt;-76&lt;span class="w"&gt; &lt;/span&gt;-90&lt;span class="w"&gt; &lt;/span&gt;-66&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$infile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;liproj.tif
gdal_translate&lt;span class="w"&gt; &lt;/span&gt;-of&lt;span class="w"&gt; &lt;/span&gt;vrt&lt;span class="w"&gt; &lt;/span&gt;-expand&lt;span class="w"&gt; &lt;/span&gt;rgba&lt;span class="w"&gt; &lt;/span&gt;liproj.tif&lt;span class="w"&gt; &lt;/span&gt;li.vr
gdal2tiles.py&lt;span class="w"&gt; &lt;/span&gt;li.vrt&lt;span class="w"&gt; &lt;/span&gt;AMSR&lt;span class="w"&gt;  &lt;/span&gt;--zoom&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;-9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Line by line:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add Anaconda environment to path which has cartopy installed. This is the easiest way to reliably install GDAL in my experience&lt;/li&gt;
&lt;li&gt;Specify input file&lt;/li&gt;
&lt;li&gt;Warp input file to EPSG:4236 (lazy, unprojected data)&lt;/li&gt;
&lt;li&gt;Colour the input file to RGBA&lt;/li&gt;
&lt;li&gt;Create webtiles at set zoom levels&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Other handy scripts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/callumrollo/adcp-gnss-mash"&gt;ADCP GNSS mash&lt;/a&gt; a Python script that combines two timestamped datasets from an autonomous platform to add location information to ADCP data. Includes parsing NMEA, manipulating files and using datetime&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/callumrollo/github-scraper"&gt;webscraping&lt;/a&gt; a nice little example of scraping data from GitHub&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/callumrollo/geotiff-generato"&gt;geotiff-generator&lt;/a&gt; A Python program to generate geotiffs from EMODnet, GEBCO or user supplied bathymetry. Includes taking user input from the command-line, stitching together EMODnet netCDFs and working with tri-band rasters&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/callumrollo/coding/blob/master/handy_scripts/mousemove"&gt;move your mouse every 30 seconds&lt;/a&gt; you never know when you might &lt;a href="https://xkcd.com/196/"&gt;need it&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Tools used&lt;/h3&gt;
&lt;p&gt;These scripts use python and/or bash. The Python stuff probably works on Windows, but all were developed on Linux. For more tools check out out &lt;a href="https://callumrollo.github.io/pages/toolbox"&gt;my toolbox&lt;/a&gt;&lt;/p&gt;</content><category term="FOSS"></category><category term="linux"></category><category term="bash"></category><category term="software"></category><category term="optimise"></category><category term="oceanography"></category><category term="cruise"></category><category term="bandwidth"></category></entry><entry><title>Erddapy griddap support</title><link href="https://callumrollo.github.io/griddap.html" rel="alternate"></link><published>2021-08-18T17:00:00+01:00</published><updated>2021-08-18T17:00:00+01:00</updated><author><name>Callum Rollo</name></author><id>tag:callumrollo.github.io,2021-08-18:/griddap.html</id><summary type="html">&lt;p&gt;Supporting gridded dataset access via erddapy&lt;/p&gt;</summary><content type="html">&lt;p&gt;As part of the &lt;a href="https://summerofcode.withgoogle.com/"&gt;Google Summer of Code&lt;/a&gt; I have been working with &lt;a href="https://github.com/ocefpaf"&gt;Filipe Fernandes&lt;/a&gt; to add &lt;a href="https://coastwatch.pfeg.noaa.gov/erddap/griddap/documentation.html"&gt;griddap&lt;/a&gt; support to the &lt;a href="https://github.com/ioos/erddapy"&gt;erddapy&lt;/a&gt; package, along with other features and performance improvements.&lt;/p&gt;
&lt;p&gt;erddapy is a well used Python package that enables programmatic access to the wealth of oceanographic data stored on ERDDAP servers around the world. &lt;a href="https://coastwatch.pfeg.noaa.gov/erddap/index.html"&gt;ERDDAP&lt;/a&gt; supplies data via two methods, tabledap and griddap.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://coastwatch.pfeg.noaa.gov/erddap/tabledap/documentation.html"&gt;Tabledap&lt;/a&gt; is used for any data that can be formatted into a tabular datastructure such as a csv, an excel spreadsheet or a pandas DataFrame. This tends to be simple time series data from oceanographic moorings, floats or gliders. erddapy supports all the standard methods of accessing tabledap data, including ERDDAP's powerful server-side subsetting and plethora of data formats.&lt;/p&gt;
&lt;p&gt;Griddap is used for higher-dimensional regularly spaced data such as satellite datasets and model output. Prior to GSoC, support for griddap was limited to the user downloading the entire dataset into an xarray object. This is workable for smaller datasets, but impractical for model outputs that can be terabytes in size, and unworkable if the user only wants small subsets of many large datasets.&lt;/p&gt;
&lt;p&gt;Better support for griddap was &lt;a href="https://github.com/ioos/erddapy/issues/32"&gt;first requested back in 2018&lt;/a&gt;, but support for this separate ERDDAP method without effecting erddapy's tabledap support or duplication large parts of the codebase was a time consuming proposition. Fortunately, Filipe's proposal to add griddap support to erddapy was accepted and funded through GSoC 2021. You can see the proposal &lt;a href="https://summerofcode.withgoogle.com/projects/#4657854750916608"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Adding griddap support was a challenge. I had to familiarise myself with a complicated Python library including techniques I had made little use of in the past, such as classes, local caching and robust request parsing. This was also the first time I had programmed against an API designed by someone else. I had to work out how to parse user input into queries that ERDDAP servers understood, then take the response and read it into Python. With Filipe's guidance, I was able to add griddap support to &lt;a href="https://github.com/ioos/erddapy/releases/tag/v1.1.0"&gt;erddapy v1.1.0&lt;/a&gt;. I also had time to create a &lt;a href="https://ioos.github.io/erddapy/01a-griddap-output.html"&gt;jupyter notebook&lt;/a&gt; walking through an example griddap query.&lt;/p&gt;
&lt;p&gt;The work has really brought home to me the importance of stability of APIs in programming. If Bob Simmons and the ERDDAP team were to make a small change to the way that griddap query urls are structured, our griddap support for erddapy would come crumbling down. It has also introduced me to a wealth of oceanographic data products that I have started to use in my PhD work, as well as a whole community of oceanography/data science wizards and all the cool projects they have built. I hope to continue my work with erddapy and support for the wider oceanographic data science ecosystem.&lt;/p&gt;</content><category term="FOSS"></category><category term="software"></category><category term="foss"></category><category term="oceanography"></category><category term="gsoc"></category></entry><entry><title>Gliderpy first release</title><link href="https://callumrollo.github.io/gliderpy.html" rel="alternate"></link><published>2021-08-11T10:45:00+01:00</published><updated>2021-08-11T10:45:00+01:00</updated><author><name>Callum Rollo</name></author><id>tag:callumrollo.github.io,2021-08-11:/gliderpy.html</id><summary type="html">&lt;p&gt;The journey of an open source oceanography package&lt;/p&gt;</summary><content type="html">&lt;p&gt;As part of the &lt;a href="https://summerofcode.withgoogle.com/"&gt;Google Summer of Code&lt;/a&gt; I have been working with &lt;a href="https://github.com/ocefpaf"&gt;Filipe Fernandes&lt;/a&gt; to improve access to ocean glider data served through &lt;a href="https://coastwatch.pfeg.noaa.gov/erddap/index.html"&gt;ERDDAP&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We were continuing work on the &lt;a href="https://github.com/ioos/gliderpy"&gt;gliderpy&lt;/a&gt; project that we created together with &lt;a href="https://github.com/LindsayRAbrams"&gt;Lindsay Abrams&lt;/a&gt; during the 2020 &lt;a href="https://oceanhackweek.github.io/"&gt;OceanHackWeek&lt;/a&gt;. This package aims to streamline the process of downloading and visualising glider data stored on ERDDAP servers and providing a simple way to directly import it into Python. We created gliderpy to do for glider data what &lt;a href="https://github.com/euroargodev/argopy"&gt;argopy&lt;/a&gt; does for argo data.&lt;/p&gt;
&lt;p&gt;During the two project days of OceanHackWeek, we created a working prototype of the package, with basic support for two ERDDAP servers and some plotting capability. This summer, with funding from GSoC, we were able to overhaul the codebase. We increased reliability with unit tests, added support for more data servers, a server-side metadata search function and standardisation of variable names. Most importantly, we packaged gliderpy and uploaded it to &lt;a href="https://pypi.org/project/gliderpy/"&gt;PyPI&lt;/a&gt; and &lt;a href="https://anaconda.org/conda-forge/gliderpy"&gt;conda-forge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Taking part in GSoC has been a great experience for me as I develop my skills a data scientist. The most valuable part of GSoC has been learning automated package management. Using tools like &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; and the &lt;a href="https://github.com/conda-incubator/grayskull"&gt;grayskull&lt;/a&gt; conda recipe creator greatly reduced the time needed to create and update the package, as well as removing several error-prone manual steps from the process. I also took part in live code review for the first time. This really improved the quality of the code I merged into gliderpy and made me think a lot more about how important structure and design patterns are in a software project. I would recommend GSoC to anyone in the ocean science community who wants to improve their software engineering skills and contribute to useful open source projects.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;The future of gliderpy&lt;/h3&gt;
&lt;p&gt;We plan to continue development of gliderpy, building on its visualisation capabilities and supporting more ERDDAP servers. Progress will be slower now that GSoC is over and other projects take priority. However, with a package published we hope to engage glider data users in testing and improving gliderpy in the FOSS tradition.&lt;/p&gt;
&lt;p&gt;Next steps for gliderpy include more elegant plotting of oceanographic data, support for more servers and visualisation of data availability. Want to get involved? Head over to &lt;a href="https://github.com/ioos/gliderpy"&gt;gliderpy&lt;/a&gt; and submit an Issue or drop me an &lt;a href="mailto:c.rollo@outlook.com"&gt;email&lt;/a&gt;.&lt;/p&gt;</content><category term="FOSS"></category><category term="software"></category><category term="foss"></category><category term="oceanography"></category><category term="gsoc"></category></entry><entry><title>Summer of Code</title><link href="https://callumrollo.github.io/gsoc.html" rel="alternate"></link><published>2021-05-17T22:00:00+01:00</published><updated>2021-05-17T22:00:00+01:00</updated><author><name>Callum Rollo</name></author><id>tag:callumrollo.github.io,2021-05-17:/gsoc.html</id><summary type="html">&lt;p&gt;How have I become a programmer?&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I got some great news, I have been accepted onto the Google Summer of Code program! You can see my project &lt;a href="https://summerofcode.withgoogle.com/projects/#4657854750916608"&gt;here&lt;/a&gt;. I'm really excited for this project, it feels quite unreal though. Google will be paying me (albiet, not much) to write code. I don't feel remotely qualified for this. I did a three day intro to Python, copied a bunch of code from stack overflow and muddled my way through some projects on GitHub and now this. I'll give this project my all, but it feels distinctly weird that I've made it this far.&lt;/p&gt;
&lt;p&gt;While the imposter syndrome takes root, I'm going to write down the steps that took me here. It may be of use to some other lost oceanographic nerd someday.&lt;/p&gt;
&lt;h1&gt;Origins&lt;/h1&gt;
&lt;p&gt;I did not grow up soldering together an Apple II in my parents basement. Nor was I inspired to mod my first person shooter games to pwn n00bs online. In fact I had no coding experience beyond some traumatic Linux reinstallations until the second year of my undergraduate degree. My first taste of programming was creating maps of earthquakes using gmt and parsing data with trail and error changes to a single line &lt;code&gt;sed&lt;/code&gt; command provided by a lecturer. It was a frustrating, but ultimately rewarding experience as I figured out how to make the computer do the repetitive tasks of geophysics. The power of a simple for-loop was far more alluring than the more prosaic methods of pencil and compass in our structural geology practicals.&lt;/p&gt;
&lt;p&gt;This course also introduced me to the joys of multi-user Linux systems and how cunning use of &lt;code&gt;cd&lt;/code&gt; and your smarter friend's username (helpfully identical to their university email) could be used to compare homework solutions. Additionally, some lecturers stored models solutions in their user directories. To this day I wonder if this was an accidental slip of group read permissions, or a subtle encouragement of outside the box problem solving.&lt;/p&gt;
&lt;p&gt;This foray into classic and still widely used geophysical tools was followed out by a course in FORTRAN 77 at Utrecht Univeristy, modelling planetary density and gravity profiles. After this course I was hooked. Never again would I compute something by hand when &lt;em&gt;the computer can do it better&lt;/em&gt;. I decided to pick the most-computing heavy MSci project I could find.&lt;/p&gt;
&lt;p&gt;In typical university fashion, my MSci project was centered around using a convoluted series of MATLAB scripts far beyond my understanding to Do Science. In my case, this was analyzing a seismic dataset to reconstruct sound velocites of subsurface rock units. The project was a lot of fun, particularly plotting the results, but the scripts passed down from my supervisor were a black box to me. At the time, I assuumed this was how all academic software was.&lt;/p&gt;
&lt;h1&gt;Development and FOSS&lt;/h1&gt;
&lt;p&gt;Beginning my PhD in oceanography, I began by using the tool most familiar to me and used by research group, namely MATLAB. 6 months into my studies however, I had a transformational experience in the form of an introductory Python course organised by the great &lt;a href="https://dennissergeev.github.io/"&gt;Denis Sergeev&lt;/a&gt;. In three short days I was introduced to a beautiful open language, and a wider ecosystem of open source. I took a month to convert my work to date into Python and haven't looked back since.&lt;/p&gt;
&lt;p&gt;Learning Python was transformational. Being taught the methods of open source made me a user of Linux, not just as a free alternative to Windows, but as an alternative way of organising.&lt;/p&gt;
&lt;h1&gt;Learner to developer&lt;/h1&gt;
&lt;p&gt;A few attending the introductory Python course, I joined my first open source community. Denis moved on to pastures new, and someone needed to take over the humble UEA Scientific Python Python Group. When no expert volunteered, I took on the job. It was a steep learning curve. I broke the website almost immediately and flailed around for anything in Python I knew enough of to present a seminar on.&lt;/p&gt;
&lt;p&gt;Alongside Python, I started using more open source tools, notably Git and Jupyter. Both of these were instrumental in transforming my day-to-day work into something reasonably repeatable and robust.&lt;/p&gt;
&lt;p&gt;Most of my learning was driven by necessity, hitting a problem in my research and reaching out for a tool to fix it. I started passing minor milestones more or less by accident. Setting up GitHub repos to back up my work, creating computational notebooks to share results with my supervisors, submitting a PR to an open source package to add functionality I needed, putting Fabio Crameri's colourmaps on PyPI and conda-forge so I didn't have to manually install them each time, joining a hackathon. None of these seemed important as I was doing them, I just needed to get a problem solved for my next tutor meeting, but they added up to something resembling an open source developer.&lt;/p&gt;
&lt;h1&gt;Thoughts on this path&lt;/h1&gt;
&lt;p&gt;From informal discussions with other earth scientists, mine is a fairly typical experience. Most of us are not formally trained software engineers. I was very lucky to get on that intro to Python in the first year of my PhD. I had the luxury of taking a month to re-orient myself to open source. This is a very fragile pipeline though. There are people making great efforts to improve software literacy within research groups, particulalry &lt;a href="https://carpentries.org/"&gt;The Carpentries&lt;/a&gt; and the &lt;a href="https://society-rse.org/"&gt;Society of Research Software Engineering&lt;/a&gt;. Change is slow in academia, but recognition of the value of open source is growing. There are many resources I wish I'd known about sooner. I try to help point junior researchers in my School to find the information they need and build more of a community. It's hard work, but in my view, more important than the research I produce in my 9-5.&lt;/p&gt;</content><category term="FOSS"></category><category term="software"></category><category term="foss"></category><category term="gsoc"></category></entry><entry><title>Packaging Python</title><link href="https://callumrollo.github.io/packaging.html" rel="alternate"></link><published>2021-02-17T21:00:00+00:00</published><updated>2021-02-17T21:00:00+00:00</updated><author><name>Callum Rollo</name></author><id>tag:callumrollo.github.io,2021-02-17:/packaging.html</id><summary type="html">&lt;p&gt;How to package your Python code to PyPI and conda-forge&lt;/p&gt;</summary><content type="html">&lt;h3&gt;The scenario&lt;/h3&gt;
&lt;p&gt;You've written a kick-ass Python script for solving your knotty scientific problem and you want to share it with your peers, great! How do you do this though? Sure, you could email it to interested parties like it's 1995, post it on twitter, or seed USBs loaded with code in strategic university car parks. There is, however, a far superior solution. Packaging.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pile of cardboard boxes" src="../images/package.jpeg"&gt; &lt;/p&gt;
&lt;p&gt;Packaging is the art of wrapping your code up into a well defined, stand-alone form and distributing it over the Information Superhighway. Packaging allows you to distribute your code in a way that is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transparent&lt;/li&gt;
&lt;li&gt;Scalable&lt;/li&gt;
&lt;li&gt;Upgradable&lt;/li&gt;
&lt;li&gt;Easy to integrate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you've coded more than a &lt;code&gt;hello world&lt;/code&gt; in Python you've already used packages. When you interact with pip/conda environment or &lt;code&gt;import numpy as np&lt;/code&gt; you are leveraging Python's extensive packaging ecosystem, standing on the shoulders of giants.&lt;/p&gt;
&lt;p&gt;Wouldn't it be great if, when people inquired about your awesome code, you could tell that installing it is a simple as &lt;code&gt;pip install my_cool_package&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Strap yourself in buddy, because in this tutorial, we're going to make that dream a reality.&lt;/p&gt;
&lt;h3&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A basic understanding of the terminal, Python and git &lt;/li&gt;
&lt;li&gt;An account on &lt;a href="https://github.com/join"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;An account on &lt;a href="https://test.pypi.org/account/register/"&gt;TestPyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A cool script*&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;*for the purpose of this tutorial, a &lt;code&gt;hello world&lt;/code&gt; is fine&lt;/p&gt;
&lt;h3&gt;Disclaimers&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Surely this has been done before?&lt;/strong&gt; There are loads of other guides out there, check out &lt;em&gt;sources&lt;/em&gt; at the bottom of this page for several of them. Other people have done it before and better. I'm only writing this because, when I created my first package, I couldn't find this info all in one place. Also PyPI went through a major revamp in 2017, so tutorials written before then can be very confusing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I did x and it didn't work/I got an error/my cat is now on fire.&lt;/strong&gt; You will very likely hit snags when following this tutorial with your own package. All code is unique, search engines are your friend, but feel free to email me if you get stuck!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Is this hard to do/will people laugh at me if I lack mad hacker skillz?&lt;/strong&gt; No! The FOSS community is far from perfect, but everyone has they're first time doing this stuff. Your merges will screw up the codebase, your CI checks will fail, your package will ship with half the parts missing. This is fine. In software, failure is cheap and part of learning.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Let's go!&lt;/h1&gt;
&lt;p&gt;You start off with a script. A beautiful script. Maybe it does something super useful like doubling a number. In a script called &lt;code&gt;bignumber.py&lt;/code&gt;, you have a function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;double_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is some pretty complex stuff, so we'll include a markdown file, &lt;code&gt;README.md&lt;/code&gt;, so readers can get the précis of our project:&lt;/p&gt;
&lt;p&gt;README.md&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;# Doubler&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doubles&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;making&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;them&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;twice&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doubler&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;documentation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://www.markdownguide.org/cheat-sheet/"&gt;&lt;em&gt;Hold up, what's markdown?&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We create a &lt;strong&gt;directory&lt;/strong&gt; for our script. This will be the name of the package, so check that it's not already taken on PyPI. I'm using the name doubler.&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyPI search results for &amp;quot;doubler&amp;quot; no relevant results found" src="../images/doubler-pypi.png"&gt; &lt;/p&gt;
&lt;p&gt;We put the script &lt;code&gt;bignumber.py&lt;/code&gt; in this directory, and add another file called &lt;code&gt;__init__.py&lt;/code&gt; next to it. This file will enable our directory to be imported as a module later.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;absolute_import&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;doubler&lt;/span&gt;


&lt;span class="n"&gt;__authors__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Callum Rollo &amp;lt;c.rollo@outlook.com&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;__version__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.0.1&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We'll want a licence too, go and grab one from &lt;a href="https://opensource.org/licenses"&gt;opensource.org&lt;/a&gt;. In this case I've gone with the simple and permissive MIT license. Just dump the text into a file called LICENSE in the base directory, adding your name and the current year at the top. The license is what makes this a rad open source project that other people are free to remix. Code posted without a license will default to being your private intellectual property, which isn't rad at all.&lt;/p&gt;
&lt;p&gt;After all this we have the following structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;packaging-dir&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;directory&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;doesn&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t&lt;span class="w"&gt; &lt;/span&gt;matter&lt;span class="o"&gt;)&lt;/span&gt;
├──&lt;span class="w"&gt; &lt;/span&gt;doubler&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;package&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="o"&gt;)&lt;/span&gt;
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;__init__.py
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;bignumber.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;actual&lt;span class="w"&gt; &lt;/span&gt;code&lt;span class="o"&gt;)&lt;/span&gt;
├──&lt;span class="w"&gt; &lt;/span&gt;LICENSE
├──&lt;span class="w"&gt; &lt;/span&gt;README.md
└──&lt;span class="w"&gt; &lt;/span&gt;setup.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;explained&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;next&lt;span class="w"&gt; &lt;/span&gt;section&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Put your project on github&lt;/h3&gt;
&lt;p&gt;Now is as good a time as any. You can point the github repo in the README so people know where to go if they have bug reports or improvements for your code. Don't forget to commit regularly!&lt;/p&gt;
&lt;h3&gt;Add setup.py&lt;/h3&gt;
&lt;p&gt;We'll need some boilerplate in &lt;strong&gt;setup.py&lt;/strong&gt;. This contains the human and machine readable information on our package. This is essential for the ship to PyPI, so check you get the info right.&lt;/p&gt;
&lt;p&gt;setup.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;README.md&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;long_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;setuptools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;doubler&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Callum Rollo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;c.rollo@outlook.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;A demo package for test PyPI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;long_description_content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text/markdown&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://github.com/callumrollo/doubler&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;classifiers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Programming Language :: Python :: 3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;License :: OSI Approved :: MIT License&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Operating System :: OS Independent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;setuptools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_packages&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;python_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;=3.6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You'll find detail on all these in this &lt;a href="https://packaging.python.org/tutorials/packaging-projects/#packaging-your-project"&gt;python.org article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, we package the code using &lt;strong&gt;setuptools&lt;/strong&gt;. If you haven't got it installed it already, it's on pip and conda-forge. From the command line in the package base directory (packaging-dir in this case), run:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python setup.py sdist&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will create a directory &lt;code&gt;dist&lt;/code&gt; that contains a tar archive of your packaged code. You will notice that the name of this archive is named using the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt; fields from setup.py.&lt;/p&gt;
&lt;h3&gt;Shipping to PyPI&lt;/h3&gt;
&lt;p&gt;Now that we've made out package, we want to put it somewhere everyone can access it. The most popular site for Python packages as PyPI. When we're starting out however, it's best to use the sandbox test PyPI, which works exactly like the real PyPI but is a safe place to make mistakes while we practice.&lt;/p&gt;
&lt;p&gt;You ship the package to test-PyPI with &lt;code&gt;twine&lt;/code&gt;, this is also availble via pip and conda.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python -m twine upload  dist/* --repository testpypi&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And that's it! Go check out your work on test.pypi.org&lt;/p&gt;
&lt;p&gt;&lt;img alt="Test PyPI search results for &amp;quot;doubler&amp;quot; package is now present" src="../images/doubler-pypi-done.png"&gt; &lt;/p&gt;
&lt;p&gt;You can now install your package anywhere in the world with&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install -i https://test.pypi.org/simple/ doubler==0.0.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once that works, do it for real on pyPI by dropping the --repository testpypi.&lt;/p&gt;
&lt;p&gt;For (test)PyPI to accept your package, you'll need the correct credentials. You can type these in the command line each time you upload your package, or add them to a  file called &lt;strong&gt;.pypirc&lt;/strong&gt; in your home folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;distutils&lt;span class="o"&gt;]&lt;/span&gt;
index-servers&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;testpypi
&lt;span class="w"&gt;    &lt;/span&gt;pypi

&lt;span class="o"&gt;[&lt;/span&gt;testpypi&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;repository&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;https://testpypi.python.org/pypi
&lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;account_name&amp;gt;
&lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;account_password&amp;gt;

&lt;span class="o"&gt;[&lt;/span&gt;pypi&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;repository&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;https://test.pypi.org/legacy/
&lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;account_name&amp;gt;
&lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;account_password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Just change the stuff in the angle brackets. You probably shouldn't &lt;a href="https://xkcd.com/792/"&gt;reuse your password&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Shipping to conda-forge&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://conda-forge.org/"&gt;Conda-forge&lt;/a&gt; is the community run package repository that is fully compatible with conda core but way bigger. Conda-forge packages build from from PyPI packages which is why we PyPI first. Conda-forge packages (called recipes) are managed through github, so you'll need to be familiar with creating pull requests.&lt;/p&gt;
&lt;p&gt;Adding a package to conda-forge is a little tricker, as it will need to be approved by a moderator. This gives your project a big visibility boost though, especially among scientists. Also scrutiny of your code is a good thing! Conda-forge admins will check that you have things like a valid open source license and functioning tests before your package is distributed.&lt;/p&gt;
&lt;p&gt;The process for adding a recipe to conda-forge is outlined on their &lt;a href="https://conda-forge.org/#add_recipe"&gt;website&lt;/a&gt;. The core action is creating a pull request on conda-forge/staged recipes that points to your PyPI package and contains key information on build requirements.&lt;/p&gt;
&lt;h3&gt;Updating&lt;/h3&gt;
&lt;p&gt;To update your PyPI package, you need to update to a higher version number, otherwise the tarball you make will have the same name and PyPI will reject it. Note that you need to update the version number in &lt;code&gt;setup.py&lt;/code&gt; and &lt;code&gt;__init__.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What version number should I go to? I like &lt;a href="https://semver.org/"&gt;semantic versioning&lt;/a&gt;. Other sytems are fine too, just be consistent.&lt;/p&gt;
&lt;p&gt;Updating on conda-forge is simple. You fork the feedstock to your git hub account, bump the version number in recipe/meta.yaml&lt;/p&gt;
&lt;p&gt;Remember to change the SHAsum too, (you can find this on the PyPI download page in Downloads &amp;gt;&amp;gt; hashes) or the CI checks will fail.&lt;/p&gt;
&lt;p&gt;There are good instructions on this in the README of the feedstock itself.&lt;/p&gt;
&lt;p&gt;In short, you need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a branch on the feedstock from your own fork&lt;/li&gt;
&lt;li&gt;Update the SHAsum to correspond to that on pypi&lt;/li&gt;
&lt;li&gt;re-render the feedstock&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How about a real package?&lt;/h3&gt;
&lt;p&gt;Copy the structure of something similar if you can. The first package I made for PyPI was a series of colourmaps, so I based it off the excellent &lt;a href="https://github.com/matplotlib/cmocean"&gt;cmocean&lt;/a&gt;. I would advise pushing to git and getting a package on test-PyPI early in development, so you can make all the early packaging mistakes before going to PyPI official.&lt;/p&gt;
&lt;p&gt;Write down your process! It will save you a world of pain when you need to update the package a year later.&lt;/p&gt;
&lt;h3&gt;Sources&lt;/h3&gt;
&lt;p&gt;https://packaging.python.org/tutorials/packaging-projects/#packaging-your-project&lt;/p&gt;
&lt;p&gt;https://blog.jonasneubert.com/2017/09/13/publishing-your-first-pypi-package/&lt;/p&gt;
&lt;p&gt;https://blog.jetbrains.com/pycharm/2017/05/how-to-publish-your-package-on-pypi/&lt;/p&gt;
&lt;p&gt;https://conda-forge.org/docs/maintainer/00_intro.html&lt;/p&gt;
&lt;h3&gt;Acronyms and terminology TODO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CI&lt;/strong&gt; Contiuouns Integration. When we push code to github we have automated tests and linting.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shipping&lt;/strong&gt; to upload code to the public (not to be confused with frieght forwarding or fanfic)&lt;/li&gt;
&lt;/ul&gt;</content><category term="FOSS"></category><category term="FOSS"></category><category term="Python"></category><category term="tutorial"></category></entry><entry><title>Shell games</title><link href="https://callumrollo.github.io/bash.html" rel="alternate"></link><published>2020-10-02T18:20:00+01:00</published><updated>2020-10-26T10:50:00+00:00</updated><author><name>Callum Rollo</name></author><id>tag:callumrollo.github.io,2020-10-02:/bash.html</id><summary type="html">&lt;p&gt;Excerpts from my .bashrc and shell scripts&lt;/p&gt;</summary><content type="html">&lt;h3&gt;First off, what's a shell?&lt;/h3&gt;
&lt;p&gt;The shell is how you, the mighty keyboard warrior, exert control over the awe-inspiring power of your &lt;a href="https://www.youtube.com/watch?v=SpLRTAGa6bU"&gt;unix system&lt;/a&gt;*.  Here I have collected some of my favourite one liners, aliases and shell scripts that I use to reduce repetitive typing, quickly analyse data, improve my writing, and more.&lt;/p&gt;
&lt;p&gt;*If you're not already on some flavour of unix, check out &lt;a href="http://matt.might.net/articles/basic-unix/"&gt;this guide&lt;/a&gt; to get up to speed. It's way more fun than you might think, I promise.&lt;/p&gt;
&lt;p&gt;For the purpose of this article the terms &lt;strong&gt;command line/shell/bash&lt;/strong&gt; all refer to the same thing. Namely, that little black box you summon with ctrl + alt + T that makes you feel like a badass 90s cyberpunk about to hack the mainframe. Mine looks like this&lt;/p&gt;
&lt;p&gt;&lt;img alt="Default terminal" src="../images/terminal.png"&gt;&lt;/p&gt;
&lt;p&gt;Yours may differ in appearance, but as long as typing &lt;code&gt;ls&lt;/code&gt; in it and hitting &lt;code&gt;enter&lt;/code&gt; returns a list of directory contents, you should be good to go. Check out the link to &lt;a href="http://matt.might.net/articles/basic-unix/"&gt;Matt Might's page&lt;/a&gt; above for a nice intro to the shell.&lt;/p&gt;
&lt;h3&gt;Some terms&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;one liner&lt;/strong&gt; is a command that is one line long.&lt;/p&gt;
&lt;p&gt;An &lt;strong&gt;alias&lt;/strong&gt; is a short name you give to a longer command, like a nickname for your favourite code snippets. You can make one right now like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="terminal alias" src="../images/terminal1.png"&gt;&lt;/p&gt;
&lt;p&gt;Now your coputer can cheerfully greet you with the time of day in 4 keystrokes, neat huh?&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;shell script&lt;/strong&gt; is a series of instructions to be executed by your shell. This can range from a one liner, to sprawling programs. The advantage of writing shell scripts rather than, say Python scripts, is that any *nix system you use will have a shell and some core utilities. No need to install dependencies. For this reason shell scripts are &lt;em&gt;portable&lt;/em&gt;, never leave the house without them! (If when you read this we are still experiencing a global pandemic, maybe don't leave the house at all if you can avoid it).&lt;/p&gt;
&lt;p&gt;Now we've covered the terminology, on to the good stuff.&lt;/p&gt;
&lt;h3&gt;My favourite aliases&lt;/h3&gt;
&lt;p&gt;Some of these are original thoughts, many are adapted from examples I've found in various corners of the internet. Using these functions can boost your productivity, increase your net worth and make you more significantly more attractive [&lt;a href="https://xkcd.com/285/"&gt;1&lt;/a&gt;][&lt;a href="https://xkcd.com/462"&gt;2&lt;/a&gt;].&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;..='cd ..'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;please='sudo'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;duh='du -h --max-depth=1'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gcb='git checkout -b'&lt;/code&gt; and a whole lot of other git shortcuts&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gdiff=" git diff --word-diff"&lt;/code&gt; check what changes you have staged in a file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hpc='ssh -XY username@uni.hpc.server&lt;/code&gt; access my uni hpc login node. I have many other aliases for quick remote access. Pro-tip: if you &lt;a href="https://www.ssh.com/ssh/copy-id"&gt;set up ssh access keys&lt;/a&gt; with &lt;code&gt;ssh-copy-id&lt;/code&gt; you won't even need to enter a password&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nb='jupyter notebook'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;space='du -hS | sort -n -r |more'&lt;/code&gt; to find what's using most space in a directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wet='curl http://v2.wttr.in/Norwich'&lt;/code&gt; why visit a weather site when you can find out form the command line why it's not worth leaving the house today?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aliasg='alias | grep'&lt;/code&gt; for when I forget what I called my aliases&lt;/li&gt;
&lt;li&gt;&lt;code&gt;histg=history | grep&lt;/code&gt; as above for command history&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set -o vi&lt;/code&gt; vim keybindings in shell. &lt;strong&gt;Only use if you love vim&lt;/strong&gt;. emacs users can try &lt;a href="https://youtu.be/dQw4w9WgXcQ?t=43"&gt;this&lt;/a&gt; instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can create an alias straight from the terminal as I did with &lt;code&gt;gday&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alias please='sudo'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note the quote marks and lack of spaces round the &lt;code&gt;=&lt;/code&gt;, these are not  optional.&lt;/p&gt;
&lt;p&gt;Aliases created in such a way will only last through your terminal session. To persist aliases, they must be copied into your shell's &lt;code&gt;rc&lt;/code&gt; file. This will be located in your home directory and typically hidden. For me it is &lt;code&gt;/home/callum/.zshrc&lt;/code&gt;. Simply copy the aliases to the end of your &lt;code&gt;rc&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;You can also set up slightly more complicated commands in the &lt;code&gt;rc&lt;/code&gt; file like so&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mcd&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command makes a directory then moves you into it. Try out &lt;code&gt;mcd test&lt;/code&gt; then &lt;code&gt;pwd&lt;/code&gt; to check where you are.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;com&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;-A
&lt;span class="w"&gt;    &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;push
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will add all files to the staging area, set a commit message of your choice and push upstream. Usage: &lt;code&gt;com "never push to master on Friday my dudes"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you can't think of a useful git commit message, fear not &lt;a href="https://github.com/lwe/whatthecommit"&gt;whatthecommit&lt;/a&gt; has you covered. Try out my favourite alias &lt;code&gt;yolo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yolo='git add -A &amp;amp;&amp;amp; git commit -m "$(curl --silent --fail http://whatthecommit.com/index.txt)" &amp;amp;&amp;amp; git push'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After building up a suitably useful/infuriating series of commit messages, you can make a pretty git commit tree to admire them &lt;a href="https://stackoverflow.com/questions/1838873/visualizing-branch-topology-in-git/34467298#34467298"&gt;(from this stackoverflow answer)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lg="git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Sample output, commit messages courtesy of whatthecommit:&lt;/p&gt;
&lt;p&gt;&lt;img alt="terminal tree" src="../images/terminal2.png"&gt;&lt;/p&gt;
&lt;h3&gt;Ugly but useful shell scripts&lt;/h3&gt;
&lt;p&gt;These have saved me many hours of tedious manual tasks. Though I think some took more time to write than they have yet saved me...&lt;/p&gt;
&lt;p&gt;Use &lt;a href="https://ffmpeg.org/"&gt;ffmpeg&lt;/a&gt; to apply fade in and out to a bunch of mp3 files&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*.mp3&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-filter_complex&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;afade=d=0.5, areverse, afade=d=0.5, areverse&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;`basename &amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; .mp3`f.mp3&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For clipping a dataset of interest from a larger geographical dataset of shapefiles before plotting. Requires &lt;a href="https://gdal.org/"&gt;gdal&lt;/a&gt; library.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# &lt;/span&gt;
ogr2ogr&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ESRI Shapefile&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;hidf_land.shp&lt;span class="w"&gt; &lt;/span&gt;/media/callum/storage/Documents/global_datasets/osm_land/land_polygons.shp&lt;span class="w"&gt; &lt;/span&gt;-clipsrc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$4&lt;/span&gt;
&lt;span class="c1"&gt;# four numbers at end are western bound southern bound eastern bound and northern bound in degrees. Longitude is from -180 to 180&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Move your mouse every 30 seconds to prevent sleep mode. Inspired by &lt;a href="https://xkcd.com/196/"&gt;xkcd&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;xdotool&lt;span class="w"&gt; &lt;/span&gt;mousemove&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;300&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;250&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;sleep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;xdotool&lt;span class="w"&gt; &lt;/span&gt;mousemove&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;300&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;850&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;sleep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Use &lt;a href="https://imagemagick.org/index.php"&gt;imagemagick&lt;/a&gt; to crop and animate a bunch of figures into a gif. Written the night before a conference, don't judge me.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bar*.png
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="nv"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;: 3:&lt;/span&gt;&lt;span class="nv"&gt;3&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;filen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;clip&lt;/span&gt;&lt;span class="nv"&gt;$num&lt;/span&gt;&lt;span class="s2"&gt;.png&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;filen2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;crop&lt;/span&gt;&lt;span class="nv"&gt;$num&lt;/span&gt;&lt;span class="s2"&gt;.png&amp;quot;&lt;/span&gt;
convert&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-trim&lt;span class="w"&gt; &lt;/span&gt;+repage&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$filen&lt;/span&gt;
convert&lt;span class="w"&gt; &lt;/span&gt;-crop&lt;span class="w"&gt; &lt;/span&gt;-800-300&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$filen&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$filen2&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
convert&lt;span class="w"&gt; &lt;/span&gt;-delay&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-loop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;crop*.png&lt;span class="w"&gt; &lt;/span&gt;animation.gif
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;foo
convert&lt;span class="w"&gt; &lt;/span&gt;animation.gif&lt;span class="w"&gt;  &lt;/span&gt;-trim&lt;span class="w"&gt; &lt;/span&gt;+repage&lt;span class="w"&gt; &lt;/span&gt;ani.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;More imagemagick to make tight figures (remove all whitespace from edges)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

rsync&lt;span class="w"&gt; &lt;/span&gt;--recursive&lt;span class="w"&gt; &lt;/span&gt;--filter&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-! */&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;figures&lt;span class="w"&gt; &lt;/span&gt;figures_crop

&lt;span class="nb"&gt;shopt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;extglob&lt;span class="w"&gt; &lt;/span&gt;nullglob&lt;span class="w"&gt; &lt;/span&gt;globstar
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;figures/**/*.png
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;convert&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-trim&lt;span class="w"&gt; &lt;/span&gt;+repage&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;figures_crop/&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Get altimeter data from Seaglider log files&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# if directory not passed, use working directory&lt;/span&gt;
&lt;span class="nv"&gt;_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Die if given a bad directory path&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$_dir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Error: Directory &lt;/span&gt;&lt;span class="nv"&gt;$_dir&lt;/span&gt;&lt;span class="s2"&gt; not found.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;

&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;alti.txt


&lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dive_no,altim_ping_depth,altim_bottom_ping,bottom_dist&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;alti.txt

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;/*.log&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;awk&lt;span class="w"&gt; &lt;/span&gt;-F,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;$1 == &amp;quot;$DIVE&amp;quot; {printf &amp;quot;\n&amp;quot; ; printf $2}&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;alti.txt
&lt;span class="w"&gt;    &lt;/span&gt;awk&lt;span class="w"&gt; &lt;/span&gt;-F,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;$1 == &amp;quot;$ALTIM_PING_DEPTH&amp;quot; {$2=&amp;quot;,&amp;quot;$2; printf $2}&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;alti.txt
&lt;span class="w"&gt;    &lt;/span&gt;awk&lt;span class="w"&gt; &lt;/span&gt;-F,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;$1 == &amp;quot;$ALTIM_BOTTOM_PING&amp;quot; {$2=&amp;quot;,&amp;quot;$2&amp;quot;,&amp;quot;; printf $2 $3}&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;alti.txt
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Get voltage minima from Seaglider logs&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# if directory not passed, use working directory&lt;/span&gt;
&lt;span class="nv"&gt;_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Die if given a bad directory path&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$_dir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Error: Directory &lt;/span&gt;&lt;span class="nv"&gt;$_dir&lt;/span&gt;&lt;span class="s2"&gt; not found.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Make a blank text file&lt;/span&gt;
&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;min_v.txt

&lt;span class="c1"&gt;# Print row names&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dive_no,min_10V,min_24V&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;min_v.txt

&lt;span class="c1"&gt;# Search the log files for minimum voltages of both batteries&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$_dir&lt;/span&gt;/p*.log&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;: -8:&lt;/span&gt;&lt;span class="nv"&gt;4&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\n&lt;/span&gt;&lt;span class="nv"&gt;$num&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;min_v.txt
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;#awk -F, &amp;#39;$1 == &amp;quot;$10V_AH&amp;quot; {printf &amp;quot;\n&amp;quot; ; printf $2}&amp;#39; $i &amp;gt;&amp;gt; min_v.txt&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;awk&lt;span class="w"&gt; &lt;/span&gt;-F,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;$1 == &amp;quot;$10V_AH&amp;quot; {$2=&amp;quot;,&amp;quot;$2; printf $2}&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;min_v.txt
&lt;span class="w"&gt;    &lt;/span&gt;awk&lt;span class="w"&gt; &lt;/span&gt;-F,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;$1 == &amp;quot;$24V_AH&amp;quot; {$2=&amp;quot;,&amp;quot;$2; printf $2}&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;min_v.txt
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="c1"&gt;# Remove rows with less than three values (typically dive 0000)&lt;/span&gt;
awk&lt;span class="w"&gt; &lt;/span&gt;-F&lt;span class="w"&gt; &lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NF&amp;gt;=3&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;min_v.txt&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;min_volts.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Scripts shamelessly copied from other, wiser people&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/"&gt;3 shell scripts to improve your writing, or "My Ph.D. advisor rewrote himself in bash."&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I think these are great, so I've archived a version &lt;a href="../images/might-scripts.zip"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[1] (https://xkcd.com/285/)&lt;/p&gt;
&lt;p&gt;[2] (https://xkcd.com/462)&lt;/p&gt;</content><category term="FOSS"></category><category term="linux"></category><category term="bash"></category><category term="software"></category><category term="optimise"></category></entry><entry><title>Why you (yes, you!) should take part in a hackathon</title><link href="https://callumrollo.github.io/hackweek.html" rel="alternate"></link><published>2020-08-25T10:00:00+01:00</published><updated>2020-08-27T12:50:00+01:00</updated><author><name>Callum Rollo</name></author><id>tag:callumrollo.github.io,2020-08-25:/hackweek.html</id><summary type="html">&lt;p&gt;Recounting my experience at Oceanhackweek 2020&lt;/p&gt;</summary><content type="html">&lt;p&gt;Two weeks ago I attended Oceanhackweek 2020. As an oceanographer by trade and free software nerd by heart, I loved the idea of an event that combined the two. I looked forward to learning from other oceanographers and coders, and perhaps giving something back to the free software community.&lt;/p&gt;
&lt;h1&gt;What is a hackweek/hackathon?&lt;/h1&gt;
&lt;p&gt;If you have yet to dip your toes in the wonderful world of free software, the concept of hacking may be alarming. Aren't hackers the bad guys in black hoodies and guy fawkes masks trying to steal my tesco clubcard points?&lt;/p&gt;
&lt;p&gt;&lt;img alt="hoodie hacker" src="../images/hacker.png"&gt;&lt;/p&gt;
&lt;p&gt;If this is the image that "hack" conjures in your mind, don't be alarmed! Hacking is not a selfish, destructive criminal activity. &lt;a href="http://catb.org/~esr/faqs/hacker-howto.html#what_is"&gt;Definitions&lt;/a&gt; &lt;a href="https://www.hackspace.org.uk/foundation/define.md"&gt;vary&lt;/a&gt;, not least because many hackers dislike top down definitions of anything. In my own opinion, hacking means working inventively to create new, useful functionality from existing tools and systems. Hacking commonly involves a strong co-operative element, often with people you have never met. Hacking is inventive, ingenious and &lt;em&gt;fun&lt;/em&gt;. Think more &lt;a href="https://en.wikipedia.org/wiki/Hackerspace"&gt;hackspaces&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Hacker_culture"&gt;hacker culture&lt;/a&gt; and less Hollywood hacking of mainframes.&lt;/p&gt;
&lt;p&gt;In a hackathon, you work with other like minded people to make cool stuff. This can be a brand new idea, picking up a neglected project, or adding functionaility to an existing popular piece of software (this is often referred to as a &lt;em&gt;sprint&lt;/em&gt;). In the context of a hackweek, it's about team work.&lt;/p&gt;
&lt;p&gt;&lt;img alt="doggo teamwork" src="https://media3.giphy.com/media/1MayKbFuSKE1O/giphy.gif?cid=ecf05e47a73r2pqbn4qxfheuu1z4nsj8u2rknlh9t4i84ovl&amp;amp;rid=giphy.gif"&gt;&lt;/p&gt;
&lt;h1&gt;How about Oceanhackweek?&lt;/h1&gt;
&lt;p&gt;As the name suggest, Oceanhackweek (OHW) is an event specifically geared towards oceanographers of all stripes. You will encounter physical, chemical and biological oceanographers, ocean archivists, ocean-oriented civil servants, students, lecturers, self taught programmers and more. OHW is open to applicants from around the world (We had participants from &lt;a href="https://twitter.com/SeascapeScience/status/1295708658664443904"&gt;6 continents&lt;/a&gt; this year). The only requirements are that you have a reasonable grasp of a free software language (currently Python or R), and some prior experience with oceanography. For more info see the OHW &lt;a href="https://oceanhackweek.github.io/applicant-info.html"&gt;FAQ for applicants&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;OHW aims to fill the gap between the traditional teaching focused summer school and a pure working hackathon. To this end, OHW20 balanced 3 hours of teaching each day with free time for participants to work on a collaborative project of their choice, supported by expert instructors. This approach helped to avoid the zoom fatigue we have all experienced after a day full of video chat meetings. The taught sessions were real masterclasses in their topics: fast paced and information dense.&lt;/p&gt;
&lt;p&gt;The real benefit of OHW20 for me was the collaborative project. I started work on &lt;a href="https://github.com/oceanhackweek/ohw20-proj-glide-data-fetcher"&gt;a project to fetch glider data&lt;/a&gt; from ERRDAP repositories with simple Python calls. This was the first time I've taken part in a collaborative coding project and it was great. I really enjoyed working with github issues and pull requests. This allows you to contribute by suggesting improvements, finding bugs, making tests, writing documentation or implementing new features without concern for duplication of effort. &lt;/p&gt;
&lt;h3&gt;Best aspects of OHW20&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Expert teaching&lt;/strong&gt; I learned &lt;em&gt;a lot&lt;/em&gt; about free software and oceanography during OHW20. I still have about 20 tabs of interesting topics open. The instructors really know their stuff and the guest lectures were great.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Asynchronous working&lt;/strong&gt; Collaborating through github we were able to work together across time zones and schedules. I was particulalry thankful for this joining a Pacific Time event from the UK (8 hours ahead!)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Horizontal structure&lt;/strong&gt; OHW20 made great efforts to remove any barriers to entry by junior participants. There were no titles or positions beyond instructor and participant. The code of conduct was presented on Day 1 with additions and edits actively encouraged from all participants. During the hack projects, we worked alongside instructors, sharing all duties as equals. These practices really help to encourage contributions, especially from ECSs with little experience of scientific coding.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Open sharing of resources&lt;/strong&gt; All the teaching materials from OHW20 are aveilable &lt;a href="https://github.com/oceanhackweek/ohw-resources"&gt;on github&lt;/a&gt; with videos uploaded &lt;a href="https://www.youtube.com/playlist?list=PLA6PlfxWZPLTPQ_OIr3dDPF9FRiHQXoVF"&gt;to youtube&lt;/a&gt; within hours of recording.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Useful projects&lt;/strong&gt; The projects are a core part of OHW. These are no hello-word's or make-work They are useful, innovative projects to improve our understanding of the oceans. You can check out the list &lt;a href="https://github.com/oceanhackweek"&gt;here&lt;/a&gt;. It was particularly good to see projects form previous years being picked up and improved on.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Self organisation&lt;/strong&gt; After a short pitch from the organisers, participants pick whichever project they want to contribute to. Within projects you organise as a team to delegate and solve issues. This allows every participant to work on whichever aspect they are most competent/interested in.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The people behind the projects&lt;/strong&gt; A glance at the list of &lt;a href="https://oceanhackweek.github.io/our-team.html"&gt;organisers&lt;/a&gt; will show a parade of names you've seen on papers, github repos and twitter accounts. OHW is a great opportunity to meet the people behind the tools we use. 10 minutes talking to the person who wrote the code &amp;gt;&amp;gt; 2 hours of puzzling through it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Focus on the future&lt;/strong&gt; OHW presents great tools, techniques, organisations and ideas that will shape the future development of oceanography. As we move into an era of big data, and the crisis of reproducibility looms, these will only become more important.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During OHW I felt like I was working with people I understood, on problems I cared about. I learned from disciplines I never would have searched for on my own, the sessions I would have skipped at a conference: ecosystem modelling, machine learning, satellite oceanography. Much of the time, scientist in these disparate fields are grappling with the same issues I am. Where do I find data? How can I combine it? How should I process it? Where should I store it? These are common problems, OHW can help you discover and implement good solutions.&lt;/p&gt;
&lt;p&gt;Our work in increasingly dependant on a stack of free software. We all need to work to make sure that the science we do is &lt;a href="https://github.com/asx-/reproducible-science/blob/master/reproducible_science.pdf"&gt;repeatable, replicable and reproducible&lt;/a&gt;. OHW supplies us with the tools we need to do this and, more importantly, it empowers us to pick up those tools and get to work. Joining a hackweek can help us to ignore those voices at the back of our heads that tell us we're too junior, too inexperienced or too ignorant to contribute to the grand projects of scientific software. We're not. If you can use git and a scripting language, you can do this. &lt;/p&gt;
&lt;p&gt;If you get the chance to attend a hackathon, grab that opportunity with both hands.&lt;/p&gt;
&lt;h3&gt;The bottom line&lt;/h3&gt;
&lt;p&gt;After a year or so of dabbling around the edges of free software, writing my own basic programs,and porting other people's stuff to Python, OHW is the first time I've felt like I am really contributing to the free software community. This has been a great experience and I plan to use what I have learned to help others at my institution and further afield. Hacking, much like science, is a team effort where we all benefit from greater sharing and co-operation.&lt;/p&gt;
&lt;p&gt;I would encourage any oceanographer who wants to better understand the computational tools of our trade, or learn how to give back to the free software community to take part in OHW. The pace was great, the online delivery was seamless and the people were awesome. I hope the organisers are able to run the event again in future years. There is a real demand for more free software and the expertise to operate it in oceanography.&lt;/p&gt;
&lt;p&gt;If you want updates on future OHW activity, You can follow them on &lt;a href="https://twitter.com/oceanhackweek"&gt;twitter&lt;/a&gt; or sign up to their low volume &lt;a href="http://mailman11.u.washington.edu/mailman/listinfo/oceanhackweek"&gt;mailing list&lt;/a&gt;. I am also happy to answer questions about my experience of it.&lt;/p&gt;
&lt;p&gt;How does such a great event come together to provide a perfect venue for learning and hacking? I assume it takes a lot of effort, organising, and ingenuity from &lt;a href="https://oceanhackweek.github.io/our-team.html"&gt;the committee&lt;/a&gt; (once more a massive thank you, you're all awesome). But I suspect &lt;a href="https://twitter.com/ocefpaf"&gt;Filipe&lt;/a&gt; would say it's&lt;/p&gt;
&lt;p&gt;&lt;img alt="magic" src="https://media.giphy.com/media/12NUbkX6p4xOO4/giphy.gif"&gt;&lt;/p&gt;</content><category term="FOSS"></category><category term="academia"></category><category term="FOSS"></category><category term="hack"></category><category term="oceanography"></category></entry><entry><title>Steal this website</title><link href="https://callumrollo.github.io/howto.html" rel="alternate"></link><published>2020-06-16T10:20:00+01:00</published><updated>2020-06-16T10:20:00+01:00</updated><author><name>Callum Rollo</name></author><id>tag:callumrollo.github.io,2020-06-16:/howto.html</id><summary type="html">&lt;p&gt;How to build this website&lt;/p&gt;</summary><content type="html">&lt;p&gt;You may look at this content-poor, lazily formatted website and think "wow, I want one of those!". If so, I have good news for you. The steps to build this website are laid out in the &lt;a href="https://github.com/callumrollo/callumrollo.github.io"&gt;github repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Very little programming expertise is required. As long as you are comfortable creating a &lt;a href="https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html"&gt;conda environment&lt;/a&gt; and a &lt;a href="https://help.github.com/en/enterprise/2.14/user/articles/create-a-repo"&gt;GitHub repository&lt;/a&gt;, the rest is ludicrously simple. &lt;/p&gt;
&lt;p&gt;I spent an excessive amount of time looking for academic sites to emulate/shamelessly copy before making this one. There are some great sites out there that provide all their source code online. I highly recommend finding one you like; imitation is, after all, the highest form of flattery. Here are some samples:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Website&lt;/th&gt;
&lt;th&gt;Source code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://dennissergeev.github.io/"&gt;Denis Sergeev&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dennissergeev/dennissergeev.github.io"&gt;source&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.leouieda.com/"&gt;Leo Uida&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/leouieda/website"&gt;source&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://kieranhealy.org/"&gt;Kieran Healy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kjhealy/kieranhealy.hugo/"&gt;source&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://alxd.org/pages/about.html#about"&gt;Pawel Ngei&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/pawelngei/alxd.org"&gt;source&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://clarkrichards.org/"&gt;Clark Richards&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/richardsc/richardsc.github.io"&gt;source&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="FOSS"></category><category term="pelican"></category><category term="publishing"></category><category term="academia"></category></entry></feed>