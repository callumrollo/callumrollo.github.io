<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Callum Rollo</title><link href="https://callumrollo.github.io/" rel="alternate"></link><link href="https://callumrollo.github.io/feeds/all.atom.xml" rel="self"></link><id>https://callumrollo.github.io/</id><updated>2021-02-17T21:00:00+00:00</updated><subtitle>Oceanographer in training</subtitle><entry><title>Packaging Python</title><link href="https://callumrollo.github.io/packaging.html" rel="alternate"></link><published>2021-02-17T21:00:00+00:00</published><updated>2021-02-17T21:00:00+00:00</updated><author><name>Callum Rollo</name></author><id>tag:callumrollo.github.io,2021-02-17:/packaging.html</id><summary type="html">&lt;p&gt;How to package your Python code to PyPI and conda-forge&lt;/p&gt;</summary><content type="html">&lt;h3&gt;The scenario&lt;/h3&gt;
&lt;p&gt;You've written a kick-ass Python script for solving your knotty scientific problem and you want to share it with your peers, great! How do you do this though? Sure, you could email it to interested parties like it's 1995, post it on twitter, or seed USBs loaded with code in strategic university car parks. There is, however, a far superior solution. Packaging.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="../images/package.jpeg"&gt; &lt;/p&gt;
&lt;p&gt;Packaging is the act of wrapping your code up into a well defined, stand-alone form and distributing it over the Information Superhighway. Packaging allows to distribute you code in a way that is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transparent&lt;/li&gt;
&lt;li&gt;Scalable&lt;/li&gt;
&lt;li&gt;Upgradable&lt;/li&gt;
&lt;li&gt;Easy to integrate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you've coded more than a &lt;code&gt;hello world&lt;/code&gt; in Python you've already used packages. When you interact with pip/conda environment or &lt;code&gt;import numpy as np&lt;/code&gt; you are leveraging Python's extensive packaging ecosystem, standing on the shoulders of giants.&lt;/p&gt;
&lt;p&gt;Wouldn't it be great if, when people inquired about your awesome code, you could tell that installing it is a simple as &lt;code&gt;pip install my_cool_package&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Strap yourself in buddy, because in this tutorial, that's exactly what we're going to do.&lt;/p&gt;
&lt;h3&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A basic understanding of the terminal, Python and git &lt;/li&gt;
&lt;li&gt;An account on &lt;a href="https://github.com/join"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;An account on &lt;a href="https://test.pypi.org/account/register/"&gt;TestPyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A cool script*&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;*for the purpose of this tutorial, a &lt;code&gt;hello world&lt;/code&gt; is fine&lt;/p&gt;
&lt;h3&gt;Disclaimers&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Surely this has been done before?&lt;/strong&gt; There are loads of other guides out there, check out &lt;em&gt;sources&lt;/em&gt; at the bottom of this page for several of them. Other people have done it before and better. I'm only writing this because, when I created my first package, I couldn't find this info all in one place. Also PyPI went through a major revamp in 2017, so tutorials written before then can be very confusing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I did x and it didn't work/I got an error/my cat is now on fire.&lt;/strong&gt; You will very likely hit snags when following this tutorial with your own package. All code is unique, search engines are your friend, but feel free to email me if you get really stuck!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Is this hard to do/will people laugh at me if I lack mad hacker skillz?&lt;/strong&gt; No! The FOSS community is far from perfect, but everyone has they're first time doing this stuff. Your merges will screw up the codebase, your CI checks will fail, your package will ship with half the parts missing. This is fine. In software, failure is cheap and part of learning.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Let's go!&lt;/h1&gt;
&lt;p&gt;You start off with a script. A beautiful script. Maybe it does something super useful like doubling a number. In a script called &lt;code&gt;bignumber.py&lt;/code&gt;, you have a function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;double_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is some pretty complex stuff, so we'll include a README.md so readers can get the précis of our project:&lt;/p&gt;
&lt;p&gt;README.md&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;# Doubler&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;doubles&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;making&lt;/span&gt; &lt;span class="n"&gt;them&lt;/span&gt; &lt;span class="n"&gt;twice&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doubler&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;documentation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://www.markdownguide.org/cheat-sheet/"&gt;&lt;em&gt;Hold up, what's markdown?&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We create a &lt;strong&gt;directory&lt;/strong&gt; for our script. This will be the name of the package, so check that it's not already taken on PyPI. I'm using the name doubler.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="../images/doubler-pypi.png"&gt; &lt;/p&gt;
&lt;p&gt;We'll want a licence too, go and grab one from &lt;a href="https://opensource.org/licenses"&gt;opensource.org&lt;/a&gt;. In this case I've gone with the simple and permissive MIT license. Just dump the text into a file called LICENSE in the base directory, adding your name and the current year at the top&lt;/p&gt;
&lt;p&gt;After all this we have the following structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;packaging-dir  &lt;span class="o"&gt;(&lt;/span&gt;this name doesn&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t matter&lt;span class="o"&gt;)&lt;/span&gt;
├── doubler &lt;span class="o"&gt;(&lt;/span&gt;your package name&lt;span class="o"&gt;)&lt;/span&gt;
│   └── bignumber.py &lt;span class="o"&gt;(&lt;/span&gt;the actual code&lt;span class="o"&gt;)&lt;/span&gt;
├── LICENSE
├── README.md
└── setup.py &lt;span class="o"&gt;(&lt;/span&gt;explained in the next section&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Put your project on github&lt;/h3&gt;
&lt;p&gt;Now is as good a time as any. You can point to this in the README so people know where to go if they have bug reports or improvements for your code. Don't forget to commit regularly.&lt;/p&gt;
&lt;h3&gt;Add setup.py&lt;/h3&gt;
&lt;p&gt;We'll need some boilerplate in &lt;strong&gt;setup.py&lt;/strong&gt;. This contains the human and machine readable information on our package. This is essential for the ship to PyPI, so check you get the info right.&lt;/p&gt;
&lt;p&gt;setup.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;README.md&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;long_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;setuptools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;doubler&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Callum Rollo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;c.rollo@outlook.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;A demo package for test PyPI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;long_description_content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text/markdown&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://github.com/callumrollo/doubler&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;classifiers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Programming Language :: Python :: 3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;License :: OSI Approved :: MIT License&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Operating System :: OS Independent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;setuptools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_packages&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;python_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;=3.6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You'll find detail on all these in this &lt;a href="https://packaging.python.org/tutorials/packaging-projects/#packaging-your-project"&gt;python.org article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, we package the code using &lt;strong&gt;setuptools&lt;/strong&gt;. If you haven't got it installed it already, it's on pip and conda-forge. From the command line in the package base directory (packaging-dir in this case), run:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python setup.py sdist&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will create a directory &lt;code&gt;dist&lt;/code&gt; that contains a tar archive of your packaged code. You will notice that the name of this archive is named using the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt; fields from setup.py.&lt;/p&gt;
&lt;h3&gt;Shipping to PyPI&lt;/h3&gt;
&lt;p&gt;Now that we've made out package, we want to put it somewhere everyone can access it. The most popular site for Python packages as PyPI. When we're starting out however, it's best to use the sandbox test PyPI, which works exactly like the real PyPI but is a safe place to make mistakes while we practice.&lt;/p&gt;
&lt;p&gt;Just change the stuff in the angle brackets. You probably shouldn't &lt;a href="https://xkcd.com/792/"&gt;reuse your password&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You ship the package to test-PyPI with &lt;code&gt;twine&lt;/code&gt;, this is also availble via pip and conda.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python -m twine upload  dist/* --repository testpypi&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And that's it! Go check out your work on test.pypi.org&lt;/p&gt;
&lt;p&gt;You can now install your package anywhere in the world with&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install -i https://test.pypi.org/simple/ doubler==0.0.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once that works, do it for real on pyPI by dropping the --repository testpypi.&lt;/p&gt;
&lt;p&gt;For (test)PyPI to accept your package, you'll need the correct credentials. You can type these in the command line each time you upload your package, or add them to a  file called &lt;strong&gt;.pypirc&lt;/strong&gt; in your home folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;distutils&lt;span class="o"&gt;]&lt;/span&gt;
index-servers&lt;span class="o"&gt;=&lt;/span&gt;
    testpypi
    pypi

&lt;span class="o"&gt;[&lt;/span&gt;testpypi&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;repository&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; https://testpypi.python.org/pypi
&lt;span class="nv"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &amp;lt;account_name&amp;gt;
&lt;span class="nv"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &amp;lt;account_password&amp;gt;

&lt;span class="o"&gt;[&lt;/span&gt;pypi&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;repository&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; https://test.pypi.org/legacy/
&lt;span class="nv"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &amp;lt;account_name&amp;gt;
&lt;span class="nv"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &amp;lt;account_password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Shipping to conda-forge&lt;/h3&gt;
&lt;p&gt;Conda-forge is the community run package repository that is fully compatible with conda core but way bigger. It works from PyPI packages which is why we do it second.&lt;/p&gt;
&lt;p&gt;Adding to conda-forge is a little tricker, as it will need to be approved by a moderator. This gives your project a big visibility boost though, especially with scientist. And scrutiny of your code is a good thing!&lt;/p&gt;
&lt;h3&gt;Updating&lt;/h3&gt;
&lt;p&gt;Updating is simple. You fork the feedstock to your git hub account, bump the version number in recipe/meta.yaml&lt;/p&gt;
&lt;p&gt;What version number should I go to? I like &lt;a href="https://semver.org/"&gt;semantic versioning&lt;/a&gt;. Other sytems are fine too, just be consistent.&lt;/p&gt;
&lt;p&gt;Remember to change the SHAsum too, (you can find this on the PyPI download page in Downloads &amp;gt;&amp;gt; hashes) or the CI checks will fail.&lt;/p&gt;
&lt;p&gt;There are good instructions on this in the README of the feedstock itself.&lt;/p&gt;
&lt;p&gt;In short, you need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a branch on the feedstock from your own fork&lt;/li&gt;
&lt;li&gt;Update the SHAsum to correspond to that on pypi&lt;/li&gt;
&lt;li&gt;re-render the feedstock&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sources&lt;/p&gt;
&lt;p&gt;https://packaging.python.org/tutorials/packaging-projects/#packaging-your-project&lt;/p&gt;
&lt;p&gt;https://blog.jonasneubert.com/2017/09/13/publishing-your-first-pypi-package/&lt;/p&gt;
&lt;p&gt;https://blog.jetbrains.com/pycharm/2017/05/how-to-publish-your-package-on-pypi/&lt;/p&gt;
&lt;p&gt;https://conda-forge.org/docs/maintainer/00_intro.html&lt;/p&gt;
&lt;h3&gt;How about a real package?&lt;/h3&gt;
&lt;p&gt;Copy the structure of something similar if you can. The first package I made for PyPI was a series of colourmaps, so I based it off the excellent &lt;a href="https://github.com/matplotlib/cmocean"&gt;cmocean&lt;/a&gt;. I would advise pushing to git and getting a package on test-PyPI early in development, so you can make all the early packaging mistakes before going to PyPI official.&lt;/p&gt;
&lt;p&gt;Write down your process! It will save you a world of pain when you need to update the package a year later.&lt;/p&gt;
&lt;h3&gt;Acronyms and terminology&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CI&lt;/strong&gt; Contiuouns Integration. When we push code to github we have automated tests and linting.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shipping&lt;/strong&gt; to upload code to the public (not to be confused with frieght forwarding or fanfic)&lt;/li&gt;
&lt;/ul&gt;</content><category term="FOSS"></category><category term="FOSS"></category><category term="Python"></category><category term="tutorial"></category></entry><entry><title>Shell games</title><link href="https://callumrollo.github.io/bash.html" rel="alternate"></link><published>2020-10-02T18:20:00+01:00</published><updated>2020-10-26T10:50:00+00:00</updated><author><name>Callum Rollo</name></author><id>tag:callumrollo.github.io,2020-10-02:/bash.html</id><summary type="html">&lt;p&gt;Excerpts from my .bashrc and shell scripts&lt;/p&gt;</summary><content type="html">&lt;h3&gt;First off, what's a shell?&lt;/h3&gt;
&lt;p&gt;The shell is how you, the mighty keyboard warrior, exert control over the awe-inspiring power of your &lt;a href="https://www.youtube.com/watch?v=SpLRTAGa6bU"&gt;unix system&lt;/a&gt;*.  Here I have collected some of my favourite one liners, aliases and shell scripts that I use to reduce repetitive typing, quickly analyse data, improve my writing, and more.&lt;/p&gt;
&lt;p&gt;*If you're not already on some flavour of unix, check out &lt;a href="http://matt.might.net/articles/basic-unix/"&gt;this guide&lt;/a&gt; to get up to speed. It's way more fun than you might think, I promise.&lt;/p&gt;
&lt;p&gt;For the purpose of this article the terms &lt;strong&gt;command line/shell/bash&lt;/strong&gt; all refer to the same thing. Namely, that little black box you summon with ctrl + alt + T that makes you feel like a badass 90s cyberpunk about to hack the mainframe. Mine looks like this&lt;/p&gt;
&lt;p&gt;&lt;img alt="Default terminal" src="../images/terminal.png"&gt;&lt;/p&gt;
&lt;p&gt;Yours may differ in appearance, but as long as typing &lt;code&gt;ls&lt;/code&gt; in it and hitting &lt;code&gt;enter&lt;/code&gt; returns a list of directory contents, you should be good to go. Check out the link to &lt;a href="http://matt.might.net/articles/basic-unix/"&gt;Matt Might's page&lt;/a&gt; above for a nice intro to the shell.&lt;/p&gt;
&lt;h3&gt;Some terms&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;one liner&lt;/strong&gt; is a command that is one line long.&lt;/p&gt;
&lt;p&gt;An &lt;strong&gt;alias&lt;/strong&gt; is a short name you give to a longer command, like a nickname for your favourite code snippets. You can make one right now like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="terminal alias" src="../images/terminal1.png"&gt;&lt;/p&gt;
&lt;p&gt;Now your coputer can cheerfully greet you with the time of day in 4 keystrokes, neat huh?&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;shell script&lt;/strong&gt; is a series of instructions to be executed by your shell. This can range from a one liner, to sprawling programs. The advantage of writing shell scripts rather than, say Python scripts, is that any *nix system you use will have a shell and some core utilities. No need to install dependencies. For this reason shell scripts are &lt;em&gt;portable&lt;/em&gt;, never leave the house without them! (If when you read this we are still experiencing a global pandemic, maybe don't leave the house at all if you can avoid it).&lt;/p&gt;
&lt;p&gt;Now we've covered the terminology, on to the good stuff.&lt;/p&gt;
&lt;h3&gt;My favourite aliases&lt;/h3&gt;
&lt;p&gt;Some of these are original thoughts, many are adapted from examples I've found in various corners of the internet. Using these functions can boost your productivity, increase your net worth and make you more significantly more attractive [&lt;a href="https://xkcd.com/285/"&gt;1&lt;/a&gt;][&lt;a href="https://xkcd.com/462"&gt;2&lt;/a&gt;].&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;..='cd ..'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;please='sudo'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;duh='du -h --max-depth=1'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gcb='git checkout -b'&lt;/code&gt; and a whole lot of other git shortcuts&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gdiff=" git diff --word-diff"&lt;/code&gt; check what changes you have staged in a file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hpc='ssh -XY username@uni.hpc.server&lt;/code&gt; access my uni hpc login node. I have many other aliases for quick remote access. Pro-tip: if you &lt;a href="https://www.ssh.com/ssh/copy-id"&gt;set up ssh access keys&lt;/a&gt; with &lt;code&gt;ssh-copy-id&lt;/code&gt; you won't even need to enter a password&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nb='jupyter notebook'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;space='du -hS | sort -n -r |more'&lt;/code&gt; to find what's using most space in a directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wet='curl http://v2.wttr.in/Norwich'&lt;/code&gt; why visit a weather site when you can find out form the command line why it's not worth leaving the house today?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aliasg='alias | grep'&lt;/code&gt; for when I forget what I called my aliases&lt;/li&gt;
&lt;li&gt;&lt;code&gt;histg=history | grep&lt;/code&gt; as above for command history&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set -o vi&lt;/code&gt; vim keybindings in shell. &lt;strong&gt;Only use if you love vim&lt;/strong&gt;. emacs users can try &lt;a href="https://youtu.be/dQw4w9WgXcQ?t=43"&gt;this&lt;/a&gt; instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can create an alias straight from the terminal as I did with &lt;code&gt;gday&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alias please='sudo'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note the quote marks and lack of spaces round the &lt;code&gt;=&lt;/code&gt;, these are not  optional.&lt;/p&gt;
&lt;p&gt;Aliases created in such a way will only last through your terminal session. To persist aliases, they must be copied into your shell's &lt;code&gt;rc&lt;/code&gt; file. This will be located in your home directory and typically hidden. For me it is &lt;code&gt;/home/callum/.zshrc&lt;/code&gt;. Simply copy the aliases to the end of your &lt;code&gt;rc&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;You can also set up slightly more complicated commands in the &lt;code&gt;rc&lt;/code&gt; file like so&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mcd &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    mkdir -p &lt;span class="nv"&gt;$1&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command makes a directory then moves you into it. Try out &lt;code&gt;mcd test&lt;/code&gt; then &lt;code&gt;pwd&lt;/code&gt; to check where you are.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;com &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    git add -A
    git commit -m &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    git push
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will add all files to the staging area, set a commit message of your choice and push upstream. Usage: &lt;code&gt;com "never push to master on Friday my dudes"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you can't think of a useful git commit message, fear not &lt;a href="https://github.com/lwe/whatthecommit"&gt;whatthecommit&lt;/a&gt; has you covered. Try out my favourite alias &lt;code&gt;yolo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yolo='git add -A &amp;amp;&amp;amp; git commit -m "$(curl --silent --fail http://whatthecommit.com/index.txt)" &amp;amp;&amp;amp; git push'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After building up a suitably useful/infuriating series of commit messages, you can make a pretty git commit tree to admire them &lt;a href="https://stackoverflow.com/questions/1838873/visualizing-branch-topology-in-git/34467298#34467298"&gt;(from this stackoverflow answer)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lg="git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Sample output, commit messages courtesy of whatthecommit:&lt;/p&gt;
&lt;p&gt;&lt;img alt="terminal tree" src="../images/terminal2.png"&gt;&lt;/p&gt;
&lt;h3&gt;Ugly but useful shell scripts&lt;/h3&gt;
&lt;p&gt;These have saved me many hours of tedious manual tasks. Though I think some took more time to write than they have yet saved me...&lt;/p&gt;
&lt;p&gt;Use &lt;a href="https://ffmpeg.org/"&gt;ffmpeg&lt;/a&gt; to apply fade in and out to a bunch of mp3 files&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; i in *.mp3&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    ffmpeg -i &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -filter_complex &lt;span class="s2"&gt;&amp;quot;afade=d=0.5, areverse, afade=d=0.5, areverse&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;`basename &amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; .mp3`f.mp3&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;For clipping a dataset of interest from a larger geographical dataset of shapefiles before plotting. Requires &lt;a href="https://gdal.org/"&gt;gdal&lt;/a&gt; library.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# &lt;/span&gt;
ogr2ogr -f &lt;span class="s2"&gt;&amp;quot;ESRI Shapefile&amp;quot;&lt;/span&gt; hidf_land.shp /media/callum/storage/Documents/global_datasets/osm_land/land_polygons.shp -clipsrc &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="nv"&gt;$2&lt;/span&gt; &lt;span class="nv"&gt;$3&lt;/span&gt; &lt;span class="nv"&gt;$4&lt;/span&gt;
&lt;span class="c1"&gt;# four numbers at end are western bound southern bound eastern bound and northern bound in degrees. Longitude is from -180 to 180&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Move your mouse every 30 seconds to prevent sleep mode. Inspired by &lt;a href="https://xkcd.com/196/"&gt;xkcd&lt;/a&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  xdotool mousemove &lt;span class="m"&gt;300&lt;/span&gt; &lt;span class="m"&gt;250&lt;/span&gt;
  sleep &lt;span class="m"&gt;30&lt;/span&gt;
  xdotool mousemove &lt;span class="m"&gt;300&lt;/span&gt; &lt;span class="m"&gt;850&lt;/span&gt;
  sleep &lt;span class="m"&gt;30&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Use &lt;a href="https://imagemagick.org/index.php"&gt;imagemagick&lt;/a&gt; to crop and animate a bunch of figures into a gif. Written the night before a conference, don't judge me.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; i in bar*.png
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="nv"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;: 3:&lt;/span&gt;&lt;span class="nv"&gt;3&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;filen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;clip&lt;/span&gt;&lt;span class="nv"&gt;$num&lt;/span&gt;&lt;span class="s2"&gt;.png&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;filen2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;crop&lt;/span&gt;&lt;span class="nv"&gt;$num&lt;/span&gt;&lt;span class="s2"&gt;.png&amp;quot;&lt;/span&gt;
convert &lt;span class="nv"&gt;$i&lt;/span&gt; -trim +repage &lt;span class="nv"&gt;$filen&lt;/span&gt;
convert -crop -800-300 &lt;span class="nv"&gt;$filen&lt;/span&gt; &lt;span class="nv"&gt;$filen2&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
convert -delay &lt;span class="m"&gt;20&lt;/span&gt; -loop &lt;span class="m"&gt;1&lt;/span&gt; crop*.png animation.gif
&lt;span class="nb"&gt;echo&lt;/span&gt; foo
convert animation.gif  -trim +repage ani.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;More imagemagick to make tight figures (remove all whitespace from edges)&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

rsync --recursive --filter&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-! */&amp;quot;&lt;/span&gt; figures figures_crop

&lt;span class="nb"&gt;shopt&lt;/span&gt; -s extglob nullglob globstar
&lt;span class="k"&gt;for&lt;/span&gt; file in figures/**/*.png
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;
    convert &lt;span class="nv"&gt;$file&lt;/span&gt; -trim +repage &lt;span class="s2"&gt;&amp;quot;figures_crop/&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Get altimeter data from Seaglider log files&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# if directory not passed, use working directory&lt;/span&gt;
&lt;span class="nv"&gt;_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Die if given a bad directory path&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; ! -d &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$_dir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Error: Directory &lt;/span&gt;&lt;span class="nv"&gt;$_dir&lt;/span&gt;&lt;span class="s2"&gt; not found.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

&amp;gt; alti.txt


&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dive_no,altim_ping_depth,altim_bottom_ping,bottom_dist&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; alti.txt

&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="nv"&gt;$1&lt;/span&gt;/*.log&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;
    awk -F, &lt;span class="s1"&gt;&amp;#39;$1 == &amp;quot;$DIVE&amp;quot; {printf &amp;quot;\n&amp;quot; ; printf $2}&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &amp;gt;&amp;gt; alti.txt
    awk -F, &lt;span class="s1"&gt;&amp;#39;$1 == &amp;quot;$ALTIM_PING_DEPTH&amp;quot; {$2=&amp;quot;,&amp;quot;$2; printf $2}&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &amp;gt;&amp;gt; alti.txt
    awk -F, &lt;span class="s1"&gt;&amp;#39;$1 == &amp;quot;$ALTIM_BOTTOM_PING&amp;quot; {$2=&amp;quot;,&amp;quot;$2&amp;quot;,&amp;quot;; printf $2 $3}&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &amp;gt;&amp;gt; alti.txt
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Get voltage minima from Seaglider logs&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# if directory not passed, use working directory&lt;/span&gt;
&lt;span class="nv"&gt;_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Die if given a bad directory path&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; ! -d &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$_dir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Error: Directory &lt;/span&gt;&lt;span class="nv"&gt;$_dir&lt;/span&gt;&lt;span class="s2"&gt; not found.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Make a blank text file&lt;/span&gt;
&amp;gt; min_v.txt

&lt;span class="c1"&gt;# Print row names&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dive_no,min_10V,min_24V&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; min_v.txt

&lt;span class="c1"&gt;# Search the log files for minimum voltages of both batteries&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="nv"&gt;$_dir&lt;/span&gt;/p*.log&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

    &lt;span class="nv"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;: -8:&lt;/span&gt;&lt;span class="nv"&gt;4&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\n&lt;/span&gt;&lt;span class="nv"&gt;$num&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; min_v.txt
    &lt;span class="c1"&gt;#awk -F, &amp;#39;$1 == &amp;quot;$10V_AH&amp;quot; {printf &amp;quot;\n&amp;quot; ; printf $2}&amp;#39; $i &amp;gt;&amp;gt; min_v.txt&lt;/span&gt;
    awk -F, &lt;span class="s1"&gt;&amp;#39;$1 == &amp;quot;$10V_AH&amp;quot; {$2=&amp;quot;,&amp;quot;$2; printf $2}&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &amp;gt;&amp;gt; min_v.txt
    awk -F, &lt;span class="s1"&gt;&amp;#39;$1 == &amp;quot;$24V_AH&amp;quot; {$2=&amp;quot;,&amp;quot;$2; printf $2}&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &amp;gt;&amp;gt; min_v.txt
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="c1"&gt;# Remove rows with less than three values (typically dive 0000)&lt;/span&gt;
awk -F , &lt;span class="s1"&gt;&amp;#39;NF&amp;gt;=3&amp;#39;&lt;/span&gt; min_v.txt &amp;gt;&amp;gt; min_volts.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h3&gt;Scripts shamelessly copied from other, wiser people&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/"&gt;3 shell scripts to improve your writing, or "My Ph.D. advisor rewrote himself in bash."&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I think these are great, so I've archived a version &lt;a href="../images/might-scripts.zip"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[1] (https://xkcd.com/285/)&lt;/p&gt;
&lt;p&gt;[2] (https://xkcd.com/462)&lt;/p&gt;</content><category term="FOSS"></category><category term="linux"></category><category term="bash"></category><category term="software"></category><category term="optimise"></category></entry><entry><title>Why you (yes, you!) should take part in a hackathon</title><link href="https://callumrollo.github.io/hackweek.html" rel="alternate"></link><published>2020-08-25T10:00:00+01:00</published><updated>2020-08-27T12:50:00+01:00</updated><author><name>Callum Rollo</name></author><id>tag:callumrollo.github.io,2020-08-25:/hackweek.html</id><summary type="html">&lt;p&gt;Recounting my experience at Oceanhackweek 2020&lt;/p&gt;</summary><content type="html">&lt;p&gt;Two weeks ago I attended Oceanhackweek 2020. As an oceanographer by trade and free software nerd by heart, I loved the idea of an event that combined the two. I looked forward to learning from other oceanographers and coders, and perhaps giving something back to the free software community.&lt;/p&gt;
&lt;h1&gt;What is a hackweek/hackathon?&lt;/h1&gt;
&lt;p&gt;If you have yet to dip your toes in the wonderful world of free software, the concept of hacking may be alarming. Aren't hackers the bad guys in black hoodies and guy fawkes masks trying to steal my tesco clubcard points?&lt;/p&gt;
&lt;p&gt;&lt;img alt="hoodie hacker" src="../images/hacker.png"&gt;&lt;/p&gt;
&lt;p&gt;If this is the image that "hack" conjures in your mind, don't be alarmed! Hacking is not a selfish, destructive criminal activity. &lt;a href="http://catb.org/~esr/faqs/hacker-howto.html#what_is"&gt;Definitions&lt;/a&gt; &lt;a href="https://www.hackspace.org.uk/foundation/define.md"&gt;vary&lt;/a&gt;, not least because many hackers dislike top down definitions of anything. In my own opinion, hacking means working inventively to create new, useful functionality from existing tools and systems. Hacking commonly involves a strong co-operative element, often with people you have never met. Hacking is inventive, ingenious and &lt;em&gt;fun&lt;/em&gt;. Think more &lt;a href="https://en.wikipedia.org/wiki/Hackerspace"&gt;hackspaces&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Hacker_culture"&gt;hacker culture&lt;/a&gt; and less Hollywood hacking of mainframes.&lt;/p&gt;
&lt;p&gt;In a hackathon, you work with other like minded people to make cool stuff. This can be a brand new idea, picking up a neglected project, or adding functionaility to an existing popular piece of software (this is often referred to as a &lt;em&gt;sprint&lt;/em&gt;). In the context of a hackweek, it's about team work.&lt;/p&gt;
&lt;p&gt;&lt;img alt="doggo teamwork" src="https://media3.giphy.com/media/1MayKbFuSKE1O/giphy.gif?cid=ecf05e47a73r2pqbn4qxfheuu1z4nsj8u2rknlh9t4i84ovl&amp;amp;rid=giphy.gif"&gt;&lt;/p&gt;
&lt;h1&gt;How about Oceanhackweek?&lt;/h1&gt;
&lt;p&gt;As the name suggest, Oceanhackweek (OHW) is an event specifically geared towards oceanographers of all stripes. You will encounter physical, chemical and biological oceanographers, ocean archivists, ocean-oriented civil servants, students, lecturers, self taught programmers and more. OHW is open to applicants from around the world (We had participants from &lt;a href="https://twitter.com/SeascapeScience/status/1295708658664443904"&gt;6 continents&lt;/a&gt; this year). The only requirements are that you have a reasonable grasp of a free software language (currently Python or R), and some prior experience with oceanography. For more info see the OHW &lt;a href="https://oceanhackweek.github.io/applicant-info.html"&gt;FAQ for applicants&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;OHW aims to fill the gap between the traditional teaching focused summer school and a pure working hackathon. To this end, OHW20 balanced 3 hours of teaching each day with free time for participants to work on a collaborative project of their choice, supported by expert instructors. This approach helped to avoid the zoom fatigue we have all experienced after a day full of video chat meetings. The taught sessions were real masterclasses in their topics: fast paced and information dense.&lt;/p&gt;
&lt;p&gt;The real benefit of OHW20 for me was the collaborative project. I started work on &lt;a href="https://github.com/oceanhackweek/ohw20-proj-glide-data-fetcher"&gt;a project to fetch glider data&lt;/a&gt; from ERRDAP repositories with simple Python calls. This was the first time I've taken part in a collaborative coding project and it was great. I really enjoyed working with github issues and pull requests. This allows you to contribute by suggesting improvements, finding bugs, making tests, writing documentation or implementing new features without concern for duplication of effort. &lt;/p&gt;
&lt;h3&gt;Best aspects of OHW20&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Expert teaching&lt;/strong&gt; I learned &lt;em&gt;a lot&lt;/em&gt; about free software and oceanography during OHW20. I still have about 20 tabs of interesting topics open. The instructors really know their stuff and the guest lectures were great.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Asynchronous working&lt;/strong&gt; Collaborating through github we were able to work together across time zones and schedules. I was particulalry thankful for this joining a Pacific Time event from the UK (8 hours ahead!)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Horizontal structure&lt;/strong&gt; OHW20 made great efforts to remove any barriers to entry by junior participants. There were no titles or positions beyond instructor and participant. The code of conduct was presented on Day 1 with additions and edits actively encouraged from all participants. During the hack projects, we worked alongside instructors, sharing all duties as equals. These practices really help to encourage contributions, especially from ECSs with little experience of scientific coding.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Open sharing of resources&lt;/strong&gt; All the teaching materials from OHW20 are aveilable &lt;a href="https://github.com/oceanhackweek/ohw-resources"&gt;on github&lt;/a&gt; with videos uploaded &lt;a href="https://www.youtube.com/playlist?list=PLA6PlfxWZPLTPQ_OIr3dDPF9FRiHQXoVF"&gt;to youtube&lt;/a&gt; within hours of recording.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Useful projects&lt;/strong&gt; The projects are a core part of OHW. These are no hello-word's or make-work They are useful, innovative projects to improve our understanding of the oceans. You can check out the list &lt;a href="https://github.com/oceanhackweek"&gt;here&lt;/a&gt;. It was particularly good to see projects form previous years being picked up and improved on.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Self organisation&lt;/strong&gt; After a short pitch from the organisers, participants pick whichever project they want to contribute to. Within projects you organise as a team to delegate and solve issues. This allows every participant to work on whichever aspect they are most competent/interested in.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The people behind the projects&lt;/strong&gt; A glance at the list of &lt;a href="https://oceanhackweek.github.io/our-team.html"&gt;organisers&lt;/a&gt; will show a parade of names you've seen on papers, github repos and twitter accounts. OHW is a great opportunity to meet the people behind the tools we use. 10 minutes talking to the person who wrote the code &amp;gt;&amp;gt; 2 hours of puzzling through it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Focus on the future&lt;/strong&gt; OHW presents great tools, techniques, organisations and ideas that will shape the future development of oceanography. As we move into an era of big data, and the crisis of reproducibility looms, these will only become more important.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During OHW I felt like I was working with people I understood, on problems I cared about. I learned from disciplines I never would have searched for on my own, the sessions I would have skipped at a conference: ecosystem modelling, machine learning, satellite oceanography. Much of the time, scientist in these disparate fields are grappling with the same issues I am. Where do I find data? How can I combine it? How should I process it? Where should I store it? These are common problems, OHW can help you discover and implement good solutions.&lt;/p&gt;
&lt;p&gt;Our work in increasingly dependant on a stack of free software. We all need to work to make sure that the science we do is &lt;a href="https://github.com/asx-/reproducible-science/blob/master/reproducible_science.pdf"&gt;repeatable, replicable and reproducible&lt;/a&gt;. OHW supplies us with the tools we need to do this and, more importantly, it empowers us to pick up those tools and get to work. Joining a hackweek can help us to ignore those voices at the back of our heads that tell us we're too junior, too inexperienced or too ignorant to contribute to the grand projects of scientific software. We're not. If you can use git and a scripting language, you can do this. &lt;/p&gt;
&lt;p&gt;If you get the chance to attend a hackathon, grab that opportunity with both hands.&lt;/p&gt;
&lt;h3&gt;The bottom line&lt;/h3&gt;
&lt;p&gt;After a year or so of dabbling around the edges of free software, writing my own basic programs,and porting other people's stuff to Python, OHW is the first time I've felt like I am really contributing to the free software community. This has been a great experience and I plan to use what I have learned to help others at my institution and further afield. Hacking, much like science, is a team effort where we all benefit from greater sharing and co-operation.&lt;/p&gt;
&lt;p&gt;I would encourage any oceanographer who wants to better understand the computational tools of our trade, or learn how to give back to the free software community to take part in OHW. The pace was great, the online delivery was seamless and the people were awesome. I hope the organisers are able to run the event again in future years. There is a real demand for more free software and the expertise to operate it in oceanography.&lt;/p&gt;
&lt;p&gt;If you want updates on future OHW activity, You can follow them on &lt;a href="https://twitter.com/oceanhackweek"&gt;twitter&lt;/a&gt; or sign up to their low volume &lt;a href="http://mailman11.u.washington.edu/mailman/listinfo/oceanhackweek"&gt;mailing list&lt;/a&gt;. I am also happy to answer questions about my experience of it.&lt;/p&gt;
&lt;p&gt;How does such a great event come together to provide a perfect venue for learning and hacking? I assume it takes a lot of effort, organising, and ingenuity from &lt;a href="https://oceanhackweek.github.io/our-team.html"&gt;the committee&lt;/a&gt; (once more a massive thank you, you're all awesome). But I suspect &lt;a href="https://twitter.com/ocefpaf"&gt;Filipe&lt;/a&gt; would say it's&lt;/p&gt;
&lt;p&gt;&lt;img alt="magic" src="https://media.giphy.com/media/12NUbkX6p4xOO4/giphy.gif"&gt;&lt;/p&gt;</content><category term="FOSS"></category><category term="academia"></category><category term="FOSS"></category><category term="hack"></category><category term="oceanography"></category></entry><entry><title>Garden trailcam videos</title><link href="https://callumrollo.github.io/trailcam.html" rel="alternate"></link><published>2020-08-11T11:30:00+01:00</published><updated>2020-08-11T11:30:00+01:00</updated><author><name>Callum Rollo</name></author><id>tag:callumrollo.github.io,2020-08-11:/trailcam.html</id><summary type="html">&lt;p&gt;Some trailcam captures from my back garden in Norwich&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Hedegehogs frequented the garden of my shared house in west Norwich&lt;/h3&gt;
&lt;p&gt;&lt;img alt="hedgehog pic" src="../images/hog.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I noticed that they would run along the low walls of the garden and try to climb them, without succes. So, I installed some hi-tech hedgehog steps (3 bricks and an old plant basket).&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/446786291" width="640" height="360" frameborder="0" allow="autoplay; fullscreen" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;These steps rapidly became popular with the local hedgehogs, including some hoglets born that spring.&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/446786252" width="640" height="360" frameborder="0" allow="autoplay; fullscreen" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I have found camera trapping with a motion-detector trailcam to be very rewarding. It is a non-invasive method for monitoring nature and suits people like me who do not have the patience to sit in hides with a telephoto lens for extended periods of time.&lt;/p&gt;
&lt;p&gt;Several of the clips have been uploaded to &lt;a href="https://www.mammalweb.org/index.php/en/"&gt;mammalweb&lt;/a&gt; for citizen science purposes. At the time of writing, this is the only trailcam site in Norwich.&lt;/p&gt;
&lt;p&gt;These videos were edited together (poorly) with the &lt;a href="https://www.openshot.org/"&gt;openshot free video editor&lt;/a&gt;&lt;/p&gt;</content><category term="Trailcam"></category><category term="trailcam"></category><category term="nature"></category><category term="non-work"></category></entry><entry><title>Articles of interest</title><link href="https://callumrollo.github.io/reading.html" rel="alternate"></link><published>2020-07-13T10:20:00+01:00</published><updated>2020-10-10T11:25:00+01:00</updated><author><name>Callum Rollo</name></author><id>tag:callumrollo.github.io,2020-07-13:/reading.html</id><summary type="html">&lt;p&gt;What I'm reading&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Articles&lt;/h2&gt;
&lt;h3&gt;Oeanography&lt;/h3&gt;
&lt;p&gt;Erik M. Bruvik, Ilker Fer, Kjetil Våge, and Peter M. Haugan - &lt;a href="https://os.copernicus.org/articles/16/291/2020/os-16-291-2020.pdf"&gt;A revised ocean glider concept to realize Stommel’s vision and supplement Argo floats&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Annie P. S. Wong et. al. &lt;a href="https://www.frontiersin.org/articles/10.3389/fmars.2020.00700/full"&gt;20 years of ARGO. Great overview with tech details, error sources and more&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wenbo Wu, Zhongwen Zhan1, Shirui Peng, Sidao Ni, Jörn Callies &lt;a href="https://science.sciencemag.org/content/369/6510/1510"&gt;Hearing the heat - Seismic ocean thermometry&lt;/a&gt; (paywalled)&lt;/p&gt;
&lt;p&gt;Fabio Crameri - &lt;a href="https://blogs.egu.eu/divisions/gd/2017/08/23/the-rainbow-colour-map/"&gt;The Rainbow Colour Map (repeatedly) considered harmful&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Joseph Gum - &lt;a href="https://github.com/asx-/reproducible-science/blob/master/reproducible_science.pdf"&gt;Reproducible Science&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ocean best practices - &lt;a href="https://repository.oceanbestpractices.org/handle/11329/1253"&gt;EGO netCDF version 1.3 glider data standardised format&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Climate&lt;/h3&gt;
&lt;p&gt;Milan Klöwer, Debbie Hopkins, Myles Allen &amp;amp; James Higham - &lt;a href="https://www.nature.com/articles/d41586-020-02057-2"&gt;An analysis of ways to decarbonize conference travel after COVID-19&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Academic software&lt;/h3&gt;
&lt;p&gt;Wilkinson et al -  &lt;a href="https://www.nature.com/articles/sdata201618"&gt;The FAIR Guiding Principles for scientific data management and stewardship&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ryan Abernathey - &lt;a href="https://www.chronicle.com/article/the-scientific-paper-is-outdated/"&gt;The scientific paper is outdated (paywalled, free account sign up)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;James Somers - &lt;a href="https://www.theatlantic.com/science/archive/2018/04/the-scientific-paper-is-obsolete/556676/"&gt;The Scientific Paper Is Obsolete&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mike Jackson - &lt;a href="https://software.ac.uk/how-cite-software"&gt;How to cite academic software&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ryan Abernathy - [Organising projects for reproducibility]https://rabernat.github.io/research_computing/organization-and-packaging-of-python-projects.html&lt;/p&gt;
&lt;h3&gt;Academic Publishing&lt;/h3&gt;
&lt;p&gt;George Monbiot - &lt;a href="https://www.monbiot.com/2011/08/29/the-lairds-of-learning/"&gt;Academic publishers are wealth extracting monopolists&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;George Monbiot - &lt;a href="https://www.monbiot.com/2018/09/17/honourable-theft/"&gt;Honourable theft (on sci-hub)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jonathan P Tennant - &lt;a href="https://ese.arphahub.com/article/51839/download/pdf/428643"&gt;Time to stop the exploitation of free academic labour&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;James Heathers - &lt;a href="https://medium.com/@jamesheathers/the-450-movement-1f86132a29bd"&gt;Demand pay for reviewing papers for profit making publishers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bjorn Brembs - &lt;a href="http://bjoern.brembs.net/2020/10/is-the-snsi-the-new-prism/"&gt;Academic publishers vs scihub. Suggested installation of spyware on university library servers&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;FOSS&lt;/h3&gt;
&lt;p&gt;Daniel Oberhaus - &lt;a href="https://www.vice.com/en/article/43zak3/the-internet-was-built-on-the-free-labor-of-open-source-developers-is-that-sustainable"&gt;Succint history of free software vs open source&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Work&lt;/h3&gt;
&lt;p&gt;Tim Barry - &lt;a href="https://www.tbray.org/ongoing/When/202x/2020/07/05/Too-Efficient"&gt;Just Too Efficient&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;David Graber - &lt;a href="https://www.strike.coop/bullshit-jobs/"&gt;Bullshit Jobs&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Rewilding and land rights&lt;/h3&gt;
&lt;p&gt;George Monbiot - &lt;a href="https://www.monbiot.com/2013/05/27/a-manifesto-for-rewilding-the-world/"&gt;Rewilding Manifesto&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mark Cocker - &lt;a href="https://www.newstatesman.com/british-countryside-access-wild-child-patrick-barkham-bringing-back-beaver-derek-gow-trespass-nick-hayes-framing-nature-lawrence-rose-review"&gt;The need for more publicly accessible green space&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WildEast in East Anglia - &lt;a href="https://www.theguardian.com/environment/2020/jul/14/farmers-wildeast-hatch-plan-return-area-size-dorset-wild-nature-east-anglia"&gt;Set aside a fifth of land for nature + credit and reward nature friendly farming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ben Macdonald - &lt;a href="https://www.spectator.co.uk/article/the-scourge-of-the-grouse-moor"&gt;On restoring grouse moors, economic and patrimonial argument&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Privacy/Surveillance&lt;/h3&gt;
&lt;p&gt;Edward Snowden - &lt;a href="https://theintercept.com/2015/11/12/edward-snowden-explains-how-to-reclaim-your-privacy/"&gt;How to reclaim your privacy&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Books that have affected my world view&lt;/h2&gt;
&lt;h3&gt;Ocean&lt;/h3&gt;
&lt;p&gt;Ian Urbina -  &lt;a href="https://www.nytimes.com/2019/08/19/books/review/outlaw-ocean-ian-urbina.html"&gt;The Outlaw Ocean&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Nature/Land&lt;/h3&gt;
&lt;p&gt;George Monbiot - &lt;a href="https://www.monbiot.com/2013/05/24/feral-searching-for-enchantment-on-the-frontiers-of-rewilding/"&gt;Feral&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Isabella Tree - &lt;a href="https://www.goodreads.com/book/show/38891828-wilding"&gt;Wilding&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Aldo Leopold - &lt;a href="https://www.aldoleopold.org/about/aldo-leopold/sand-county-almanac/"&gt;Sand County Almanac&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nick Hayes - &lt;a href="https://www.theguardian.com/books/2020/aug/10/the-book-of-trespass-by-nick-hayes-review-a-trespassers-radical-manifesto"&gt;The Book of Trespass&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Economics/Society&lt;/h3&gt;
&lt;p&gt;David Graeber - &lt;a href="https://www.goodreads.com/book/show/6617037-debt"&gt;Debt: The First 5000 Years&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Privacy/Surveillance&lt;/h3&gt;
&lt;p&gt;Edward Snowden - &lt;a href="https://www.goodreads.com/book/show/46223297-permanent-record"&gt;Permanent Record&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cory Doctorow - &lt;a href="https://craphound.com/littlebrother/download/"&gt;Little Brother&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kevin Mitnic - &lt;a href="https://www.mitnicksecurity.com/the-art-of-invisibility-mitnick-security"&gt;The Art of Invisibility&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Some great authors&lt;/h3&gt;
&lt;p&gt;Neal Stephenson, Iain (M) Banks, Cory Doctorow, Charlie Stross&lt;/p&gt;
&lt;h3&gt;Academics' websites I enjoy&lt;/h3&gt;
&lt;p&gt;In my experience, the more poorly formatted the website, the better the quality of ideas.&lt;/p&gt;
&lt;p&gt;http://matt.might.net&lt;/p&gt;
&lt;p&gt;https://betterfigures.org/&lt;/p&gt;
&lt;h2&gt;Sites I visit when I Should Be Writing&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://existentialcomics.com/"&gt;Existential comics&lt;/a&gt; an entertainingly good intro to various schools of philosophy&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.schneierfacts.com"&gt;Bruce Schneier facts&lt;/a&gt; crypto jokes&lt;/p&gt;
&lt;p&gt;&lt;a href="xkcd.com"&gt;xkcd&lt;/a&gt; (duh)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://whatthecommit.com/"&gt;what the commit&lt;/a&gt; spice up your git commits by pulling a random message from here&lt;/p&gt;</content><category term="Reading"></category><category term="articles"></category><category term="opinion"></category><category term="academia"></category><category term="nature"></category></entry><entry><title>Steal this website</title><link href="https://callumrollo.github.io/howto.html" rel="alternate"></link><published>2020-06-16T10:20:00+01:00</published><updated>2020-06-16T10:20:00+01:00</updated><author><name>Callum Rollo</name></author><id>tag:callumrollo.github.io,2020-06-16:/howto.html</id><summary type="html">&lt;p&gt;How to build this website&lt;/p&gt;</summary><content type="html">&lt;p&gt;You may look at this content-poor, lazily formatted website and think "wow, I want one of those!". If so, I have good news for you. The steps to build this website are laid out in the &lt;a href="https://github.com/callumrollo/callumrollo.github.io"&gt;github repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Very little programming expertise is required. As long as you are comfortable creating a &lt;a href="https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html"&gt;conda environment&lt;/a&gt; and a &lt;a href="https://help.github.com/en/enterprise/2.14/user/articles/create-a-repo"&gt;GitHub repository&lt;/a&gt;, the rest is ludicrously simple. &lt;/p&gt;
&lt;p&gt;I spent an excessive amount of time looking for academic sites to emulate/shamelessly copy before making this one. There are some great sites out there that provide all their source code online. I highly recommend finding one you like; imitation is, after all, the highest form of flattery. Here are some samples:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Website&lt;/th&gt;
&lt;th&gt;Source code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://dennissergeev.github.io/"&gt;Denis Sergeev&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dennissergeev/dennissergeev.github.io"&gt;source&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.leouieda.com/"&gt;Leo Uida&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/leouieda/website"&gt;source&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://kieranhealy.org/"&gt;Kieran Healy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/kjhealy/kieranhealy.hugo/"&gt;source&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://alxd.org/pages/about.html#about"&gt;Pawel Ngei&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/pawelngei/alxd.org"&gt;source&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://clarkrichards.org/"&gt;Clark Richards&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/richardsc/richardsc.github.io"&gt;source&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="FOSS"></category><category term="pelican"></category><category term="publishing"></category><category term="academia"></category></entry></feed>